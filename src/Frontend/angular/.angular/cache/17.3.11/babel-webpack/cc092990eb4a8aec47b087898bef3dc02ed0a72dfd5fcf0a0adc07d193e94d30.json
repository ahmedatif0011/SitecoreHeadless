{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createCookieString, getCookieServerSide, isHttpRequest, isHttpResponse, isNextJsMiddlewareRequest, isNextJsMiddlewareResponse } from '@sitecore-cloudsdk/utils';\nimport { fetchBrowserIdFromEdgeProxy } from '../../browser-id/fetch-browser-id-from-edge-proxy';\nimport { COOKIE_NAME_PREFIX, DEFAULT_COOKIE_EXPIRY_DAYS, ErrorMessages, SITECORE_EDGE_URL } from '../../consts';\nimport { getCookieValueFromMiddlewareRequest } from '../../cookie/get-cookie-value-from-middleware-request';\nimport { getDefaultCookieAttributes } from '../../cookie/get-default-cookie-attributes';\nimport { debug } from '../../debug/debug';\nimport { CORE_NAMESPACE } from '../../debug/namespaces';\nexport let cloudSDKSettings;\nexport const enabledPackages = new Map();\nlet cookiesValuesFromEdge;\nexport let cloudSKDRequest;\nexport let cloudSKDResponse;\nexport class CloudSDKServerInitializer {\n  /**\n   * Runs the initialization logic. Enables packages and create cookies for CloudSDK.\n   * @param request - The request object, either a Middleware Request or an HTTP Request\n   * @param response - The response object, either a Middleware Next Response or an HTTP Response\n   * @param settings - Common settings for the CloudSDK\n   * @throws the following errors:\n   * {@link ErrorMessages.MV_0001}\n   * {@link ErrorMessages.MV_0002}\n   * {@link ErrorMessages.IV_0001}\n   */\n  constructor(request, response, settings) {\n    this.validateSettings(settings);\n    cloudSDKSettings = this.createSettings(settings);\n    this.request = request;\n    this.response = response;\n  }\n  /**\n   * Runs the initialization logic. Enables packages and create cookies for CloudSDK.\n   */\n  initialize() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!enabledPackages.size) debug(CORE_NAMESPACE)('CloudSDK was initialized with no packages');\n      if (cloudSDKSettings.cookieSettings.enableServerCookie) yield _this.createCookies();\n      const execs = Array.from(enabledPackages).map(([, value]) => value.exec());\n      yield Promise.all(execs);\n    })();\n  }\n  /**\n   * Validates the core settings to ensure they meet required criteria.\n   *\n   * This function validates the provided core settings object to ensure that essential properties\n   * such as \"sitecoreEdgeContextId\" and \"siteName\" meet specific criteria and are not empty.\n   *\n   * @throws Error with specific error codes if any required property is missing or empty.\n   */\n  validateSettings(settings) {\n    const {\n      sitecoreEdgeContextId,\n      siteName,\n      sitecoreEdgeUrl\n    } = settings;\n    if (!sitecoreEdgeContextId || sitecoreEdgeContextId.trim().length === 0) throw new Error(ErrorMessages.MV_0001);\n    if (!siteName || siteName.trim().length === 0) throw new Error(ErrorMessages.MV_0002);\n    if (sitecoreEdgeUrl !== undefined) try {\n      new URL(sitecoreEdgeUrl);\n    } catch (e) {\n      throw new Error(ErrorMessages.IV_0001);\n    }\n  }\n  createSettings(settings) {\n    const {\n      siteName,\n      sitecoreEdgeContextId,\n      cookieDomain,\n      cookiePath,\n      cookieExpiryDays,\n      sitecoreEdgeUrl,\n      enableServerCookie,\n      timeout\n    } = settings;\n    return {\n      cookieSettings: {\n        domain: cookieDomain,\n        enableServerCookie: enableServerCookie ?? false,\n        expiryDays: cookieExpiryDays || DEFAULT_COOKIE_EXPIRY_DAYS,\n        name: {\n          browserId: `${COOKIE_NAME_PREFIX}${sitecoreEdgeContextId}`\n        },\n        path: cookiePath || '/'\n      },\n      siteName,\n      sitecoreEdgeContextId,\n      sitecoreEdgeUrl: sitecoreEdgeUrl ?? SITECORE_EDGE_URL,\n      timeout\n    };\n  }\n  createCookies() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (isNextJsMiddlewareRequest(_this2.request) && isNextJsMiddlewareResponse(_this2.response)) yield _this2.handleNextJsMiddlewareCookie();else if (isHttpRequest(_this2.request) && isHttpResponse(_this2.response)) yield _this2.handleHttpCookie();\n    })();\n  }\n  handleNextJsMiddlewareCookie() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const request = _this3.request;\n      const response = _this3.response;\n      const {\n        browserId: browserIdName\n      } = cloudSDKSettings.cookieSettings.name;\n      let browserIdCookieValue = getCookieValueFromMiddlewareRequest(request, browserIdName);\n      if (!browserIdCookieValue) {\n        const cookieValues = yield fetchBrowserIdFromEdgeProxy(cloudSDKSettings.sitecoreEdgeUrl, cloudSDKSettings.sitecoreEdgeContextId, cloudSDKSettings.timeout);\n        browserIdCookieValue = cookieValues.browserId;\n        cookiesValuesFromEdge = cookieValues;\n      }\n      const defaultCookieAttributes = getDefaultCookieAttributes(cloudSDKSettings.cookieSettings.expiryDays, cloudSDKSettings.cookieSettings.domain);\n      request.cookies.set(browserIdName, browserIdCookieValue, defaultCookieAttributes);\n      response.cookies.set(browserIdName, browserIdCookieValue, defaultCookieAttributes);\n    })();\n  }\n  handleHttpCookie() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const request = _this4.request;\n      const response = _this4.response;\n      const browserIdName = cloudSDKSettings.cookieSettings.name.browserId;\n      const browserIdCookie = getCookieServerSide(request.headers.cookie, browserIdName);\n      let browserIdCookieValue;\n      const defaultCookieAttributes = getDefaultCookieAttributes(cloudSDKSettings.cookieSettings.expiryDays, cloudSDKSettings.cookieSettings.domain);\n      if (!browserIdCookie) {\n        const cookieValues = yield fetchBrowserIdFromEdgeProxy(cloudSDKSettings.sitecoreEdgeUrl, cloudSDKSettings.sitecoreEdgeContextId, cloudSDKSettings.timeout);\n        browserIdCookieValue = cookieValues.browserId;\n        cookiesValuesFromEdge = cookieValues;\n      } else browserIdCookieValue = browserIdCookie.value;\n      const browserIdCookieString = createCookieString(browserIdName, browserIdCookieValue, defaultCookieAttributes);\n      if (!browserIdCookie) request.headers.cookie = request.headers.cookie ? request.headers.cookie + '; ' + browserIdCookieString : browserIdCookieString;\n      response.setHeader('Set-Cookie', browserIdCookieString);\n    })();\n  }\n}\nexport function getCloudSDKSettings() {\n  if (!cloudSDKSettings) throw new Error(ErrorMessages.IE_0013);\n  return cloudSDKSettings;\n}\nexport function getEnabledPackage(packageName) {\n  return enabledPackages.get(packageName);\n}\nexport function getCloudSDKRequest() {\n  return cloudSKDRequest;\n}\nexport function getCloudSDKResponse() {\n  return cloudSKDResponse;\n}\nexport function getCookiesValuesFromEdge() {\n  return cookiesValuesFromEdge;\n}\nexport let builderInstance = null;\n/**\n * Runs the initialization logic. Enables packages and create cookies for CloudSDK.\n * @param request - The request object, either a Middleware Request or an HTTP Request\n * @param response - The response object, either a Middleware Next Response or an HTTP Response\n * @param settings - Common settings for the CloudSDK\n * @returns An instance of {@link CloudSDKServerInitializer}\n * @throws the following errors:\n * {@link ErrorMessages.MV_0001}\n * {@link ErrorMessages.MV_0002}\n * {@link ErrorMessages.IV_0001}\n */\nexport function CloudSDK(request, response, settings) {\n  cloudSKDRequest = request;\n  cloudSKDResponse = response;\n  builderInstance = new CloudSDKServerInitializer(request, response, settings);\n  return builderInstance;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}