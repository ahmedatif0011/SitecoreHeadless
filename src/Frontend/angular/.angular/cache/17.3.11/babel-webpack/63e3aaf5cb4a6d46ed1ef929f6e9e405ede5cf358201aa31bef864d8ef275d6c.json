{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StyleguideAngularLazyLoadingModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst sitecore_jss_angular_1 = require(\"@sitecore-jss/sitecore-jss-angular\");\nconst styleguide_angular_lazy_loading_component_1 = require(\"./styleguide-angular-lazy-loading.component\");\nconst app_components_shared_module_1 = require(\"../app-components.shared.module\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"@sitecore-jss/sitecore-jss-angular\"));\n// By default, the presence of a module in a component folder like this one makes JSS\n// lazy-load the component. This module works a lot like angular route-based lazy loading.\nlet StyleguideAngularLazyLoadingModule = /*#__PURE__*/(() => {\n  class StyleguideAngularLazyLoadingModule {\n    static ɵfac = function StyleguideAngularLazyLoadingModule_Factory(t) {\n      return new (t || StyleguideAngularLazyLoadingModule)();\n    };\n    static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: StyleguideAngularLazyLoadingModule\n    });\n    static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      imports: [\n      // this call signals to JSS that this component is the one being lazy loaded by this module\n      sitecore_jss_angular_1.JssModule.forChild(styleguide_angular_lazy_loading_component_1.StyleguideAngularLazyLoadingComponent), app_components_shared_module_1.AppComponentsSharedModule]\n    });\n  }\n  return StyleguideAngularLazyLoadingModule;\n})();\nexports.StyleguideAngularLazyLoadingModule = StyleguideAngularLazyLoadingModule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}