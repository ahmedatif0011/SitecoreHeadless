{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLPersonalizeService = void 0;\nconst debug_1 = __importDefault(require(\"../debug\"));\nconst utils_1 = require(\"../utils\");\nconst cache_client_1 = require(\"../cache-client\");\nclass GraphQLPersonalizeService {\n  /**\n   * Fetch personalize data using the Sitecore GraphQL endpoint.\n   * @param {GraphQLPersonalizeServiceConfig} config\n   */\n  constructor(config) {\n    this.config = config;\n    this.config.timeout = config.timeout || 400;\n    this.graphQLClient = this.getGraphQLClient();\n    this.cache = this.getCacheClient();\n  }\n  get query() {\n    return /* GraphQL */`\n      query($siteName: String!, $language: String!, $itemPath: String!) {\n        layout(site: $siteName, routePath: $itemPath, language: $language) {\n          item {\n            id\n            version\n            personalization {\n              variantIds\n            }\n          }\n        }\n      }\n    `;\n  }\n  /**\n   * Get personalize information for a route\n   * @param {string} itemPath page route\n   * @param {string} language language\n   * @param {string} siteName site name\n   * @returns {Promise<PersonalizeInfo | undefined>} the personalize information or undefined (if itemPath / language not found)\n   */\n  getPersonalizeInfo(itemPath, language, siteName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a;\n      debug_1.default.personalize('fetching personalize info for %s %s %s', siteName, itemPath, language);\n      const cacheKey = this.getCacheKey(itemPath, language, siteName);\n      let data = this.cache.getCacheValue(cacheKey);\n      if (!data) {\n        try {\n          data = yield this.graphQLClient.request(this.query, {\n            siteName,\n            itemPath,\n            language\n          });\n          this.cache.setCacheValue(cacheKey, data);\n        } catch (error) {\n          if ((0, utils_1.isTimeoutError)(error)) {\n            return undefined;\n          }\n          throw error;\n        }\n      }\n      return ((_a = data === null || data === void 0 ? void 0 : data.layout) === null || _a === void 0 ? void 0 : _a.item) ? {\n        pageId: data.layout.item.id,\n        variantIds: data.layout.item.personalization.variantIds\n      } : undefined;\n    });\n  }\n  /**\n   * Gets cache client implementation\n   * Override this method if custom cache needs to be used\n   * @returns CacheClient instance\n   */\n  getCacheClient() {\n    var _a, _b;\n    return new cache_client_1.MemoryCacheClient({\n      cacheEnabled: (_a = this.config.cacheEnabled) !== null && _a !== void 0 ? _a : true,\n      cacheTimeout: (_b = this.config.cacheTimeout) !== null && _b !== void 0 ? _b : 10\n    });\n  }\n  getCacheKey(itemPath, language, siteName) {\n    return `${siteName}-${itemPath}-${language}`;\n  }\n  /**\n   * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default\n   * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you\n   * want to use something else.\n   * @returns {GraphQLClient} implementation\n   */\n  getGraphQLClient() {\n    if (!this.config.clientFactory) {\n      throw new Error('clientFactory needs to be provided when initializing GraphQL client.');\n    }\n    return this.config.clientFactory({\n      debugger: debug_1.default.personalize,\n      fetch: this.config.fetch,\n      timeout: this.config.timeout\n    });\n  }\n}\nexports.GraphQLPersonalizeService = GraphQLPersonalizeService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}