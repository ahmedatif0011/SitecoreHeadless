{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLModule = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst core_2 = require(\"@apollo/client/core\");\nconst apollo_angular_1 = require(\"apollo-angular\");\nconst http_2 = require(\"apollo-angular/http\");\nconst common_1 = require(\"@angular/common\");\nconst environment_1 = require(\"../environments/environment\");\nconst jss_graphql_service_1 = require(\"./jss-graphql.service\");\n/*\n  INTROSPECTION DATA\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\n  This enables the Apollo cache to process fragments on interface types correctly.\n  If this file does not exist, you may need to run the `jss graphql:update` script.\n*/\nconst graphql_fragment_types_1 = tslib_1.__importDefault(require(\"../graphql-fragment-types\"));\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"apollo-angular\"));\nconst i2 = tslib_1.__importStar(require(\"apollo-angular/http\"));\n// SSR transfer state key to serialize + rehydrate apollo cache on client side\n// See https://www.apollographql.com/docs/angular/recipes/server-side-rendering.html\nconst STATE_KEY = (0, core_1.makeStateKey)('apollo.state');\nlet GraphQLModule = /*#__PURE__*/(() => {\n  class GraphQLModule {\n    apollo;\n    httpLink;\n    transferState;\n    platformId;\n    constructor(apollo, httpLink, transferState, platformId) {\n      this.apollo = apollo;\n      this.httpLink = httpLink;\n      this.transferState = transferState;\n      this.platformId = platformId;\n      this.createApolloClient();\n    }\n    onServer(cache) {\n      this.transferState.onSerialize(STATE_KEY, () => cache.extract());\n    }\n    onBrowser(cache) {\n      const state = this.transferState.get(STATE_KEY, null);\n      cache.restore(state);\n    }\n    createApolloClient() {\n      /*\n        QUERY LINK SELECTION\n        A link is transport which GraphQL queries are pushed across.\n        You have many choices.\n        See the apollo-link documentation for more details.\n      */\n      // set sc_apikey header which is required for any GraphQL calls\n      const sc_apikey = new http_1.HttpHeaders().set('sc_apikey', environment_1.environment.sitecoreApiKey);\n      // choose between a basic HTTP link to run queries...\n      // import { createHttpLink } from 'apollo-angular-link-http';\n      // const link = createHttpLink({ uri: endpoint });\n      // ...or a batched link (multiple queries within 10ms all go in one HTTP request)\n      const batchHttp = this.httpLink.create({\n        uri: environment_1.environment.graphQLEndpoint,\n        headers: sc_apikey\n      });\n      const possibleTypes = {};\n      graphql_fragment_types_1.default.__schema.types.forEach(supertype => {\n        possibleTypes[supertype.name] = supertype.possibleTypes.map(subtype => subtype.name);\n      });\n      const cache = new core_2.InMemoryCache({\n        possibleTypes\n      });\n      this.apollo.create({\n        link: batchHttp,\n        cache,\n        ssrMode: (0, common_1.isPlatformServer)(this.platformId),\n        ssrForceFetchDelay: 100\n      });\n      const isBrowser = this.transferState.hasKey(STATE_KEY);\n      if (isBrowser) {\n        this.onBrowser(cache);\n      } else {\n        this.onServer(cache);\n      }\n    }\n    static ɵfac = function GraphQLModule_Factory(t) {\n      return new (t || GraphQLModule)(i0.ɵɵinject(i1.Apollo), i0.ɵɵinject(i2.HttpBatchLink), i0.ɵɵinject(i0.TransferState), i0.ɵɵinject(core_1.PLATFORM_ID));\n    };\n    static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: GraphQLModule\n    });\n    static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [jss_graphql_service_1.JssGraphQLService],\n      imports: [apollo_angular_1.ApolloModule, http_1.HttpClientModule]\n    });\n  }\n  return GraphQLModule;\n})();\nexports.GraphQLModule = GraphQLModule;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}