{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dictionaryServiceFactory = exports.DictionaryServiceFactory = void 0;\nconst tslib_1 = require(\"tslib\");\nconst sitecore_jss_angular_1 = require(\"@sitecore-jss/sitecore-jss-angular\");\nconst environment_1 = require(\"../../environments/environment\");\nconst graphql_client_factory_1 = tslib_1.__importDefault(require(\"./graphql-client-factory\"));\nclass DictionaryServiceFactory {\n  create() {\n    const service = process.env.FETCH_WITH === sitecore_jss_angular_1.constants.FETCH_WITH.REST ? new sitecore_jss_angular_1.RestDictionaryService({\n      apiHost: environment_1.environment.sitecoreApiHost,\n      apiKey: environment_1.environment.sitecoreApiKey,\n      siteName: environment_1.environment.sitecoreSiteName\n    }) : new sitecore_jss_angular_1.GraphQLDictionaryService({\n      clientFactory: graphql_client_factory_1.default,\n      siteName: environment_1.environment.sitecoreSiteName\n      /*\n      The Dictionary Service needs a root item ID in order to fetch dictionary phrases for the current\n      app. If your Sitecore instance only has 1 JSS App, you can specify the root item ID here;\n      otherwise, the service will attempt to figure out the root item for the current JSS App using GraphQL and app name.\n      rootItemId: '{GUID}'\n      */\n    });\n    return service;\n  }\n}\nexports.DictionaryServiceFactory = DictionaryServiceFactory;\nexports.dictionaryServiceFactory = new DictionaryServiceFactory();","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}