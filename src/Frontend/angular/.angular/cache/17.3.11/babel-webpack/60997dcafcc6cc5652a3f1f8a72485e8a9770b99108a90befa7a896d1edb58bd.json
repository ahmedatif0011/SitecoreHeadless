{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLayoutComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst jss_context_service_1 = require(\"../../jss-context.service\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nconst i1 = tslib_1.__importStar(require(\"../../jss-context.service\"));\nconst i2 = tslib_1.__importStar(require(\"@angular/common\"));\nconst i3 = tslib_1.__importStar(require(\"@sitecore-jss/sitecore-jss-angular\"));\nfunction GraphQLLayoutComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵtext(2, \" This app is running in disconnected mode. GraphQL requires connected mode, headless connected mode, or integrated mode to work. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4, \" Libraries such as \");\n    i0.ɵɵelementStart(5, \"code\");\n    i0.ɵɵtext(6, \"graphql-tools\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" can provide GraphQL API mocking capabilities, which could enable disconnected GraphQL. This is not supported out of the box, however. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"p\");\n    i0.ɵɵtext(9, \" To view the GraphQL samples, restart the app using \");\n    i0.ɵɵelementStart(10, \"code\");\n    i0.ɵɵtext(11, \"jss start:connected\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(12, \"\\u00A0 or deploy the app to Sitecore to run in integrated mode per the JSS documentation. \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction GraphQLLayoutComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"sc-placeholder\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"rendering\", ctx_r0.rendering);\n  }\n}\nlet GraphQLLayoutComponent = /*#__PURE__*/(() => {\n  class GraphQLLayoutComponent {\n    contextService;\n    rendering;\n    disconnectedMode;\n    constructor(contextService) {\n      this.contextService = contextService;\n    }\n    ngOnInit() {\n      this.disconnectedMode = this.contextService.stateValue.sitecore.route.itemId === 'available-in-connected-mode';\n    }\n    static ɵfac = function GraphQLLayoutComponent_Factory(t) {\n      return new (t || GraphQLLayoutComponent)(i0.ɵɵdirectiveInject(i1.JssContextService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GraphQLLayoutComponent,\n      selectors: [[\"app-graph-ql-layout\"]],\n      inputs: {\n        rendering: \"rendering\"\n      },\n      decls: 3,\n      vars: 2,\n      consts: [[\"data-e2e-id\", \"graphql-layout\"], [4, \"ngIf\"], [\"name\", \"jss-graphql-layout\", 3, \"rendering\"]],\n      template: function GraphQLLayoutComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, GraphQLLayoutComponent_ng_container_1_Template, 13, 0, \"ng-container\", 1)(2, GraphQLLayoutComponent_ng_container_2_Template, 2, 1, \"ng-container\", 1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.disconnectedMode);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.disconnectedMode);\n        }\n      },\n      dependencies: [i2.NgIf, i3.PlaceholderComponent],\n      encapsulation: 2\n    });\n  }\n  return GraphQLLayoutComponent;\n})();\nexports.GraphQLLayoutComponent = GraphQLLayoutComponent;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}