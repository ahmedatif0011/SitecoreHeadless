{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createCookieString, getCookieServerSide } from '@sitecore-cloudsdk/utils';\nimport { fetchBrowserIdFromEdgeProxy } from '../browser-id/fetch-browser-id-from-edge-proxy';\nimport { getGuestId } from '../init/get-guest-id';\nimport { getDefaultCookieAttributes } from './get-default-cookie-attributes';\n/**\n * Handles HTTP Cookie operations for setting the browser ID cookie in the request and response.\n *\n * @param request - The HTTP Request object containing request headers and data.\n * @param response - The HTTP Response object.\n * @param options - The settings object containing configuration options.\n * @param timeout - The timeout for the call to proxy to get browserId.\n * @returns A Promise that resolves once the browser ID cookie is handled.\n *\n * @throws [IE-0003] - This exception is thrown in the case getBrowserIdFromEP wasn't able to retrieve a browser id.\n */\nexport function handleHttpCookie(_x, _x2, _x3, _x4) {\n  return _handleHttpCookie.apply(this, arguments);\n}\nfunction _handleHttpCookie() {\n  _handleHttpCookie = _asyncToGenerator(function* (request, response, options, timeout) {\n    const {\n      browserId,\n      guestId\n    } = options.cookieSettings.cookieNames;\n    const browserIdCookie = getCookieServerSide(request.headers.cookie, browserId);\n    let browserIdCookieValue;\n    const guestIdCookie = getCookieServerSide(request.headers.cookie, guestId);\n    let guestIdCookieValue;\n    const defaultCookieAttributes = getDefaultCookieAttributes(options.cookieSettings.cookieExpiryDays, options.cookieSettings.cookieDomain);\n    if (!browserIdCookie) {\n      const cookieValues = yield fetchBrowserIdFromEdgeProxy(options.sitecoreEdgeUrl, options.sitecoreEdgeContextId, timeout);\n      browserIdCookieValue = cookieValues.browserId;\n      guestIdCookieValue = cookieValues.guestId;\n    } else {\n      browserIdCookieValue = browserIdCookie.value;\n      if (!guestIdCookie) guestIdCookieValue = yield getGuestId(browserIdCookie.value, options.sitecoreEdgeContextId, options.sitecoreEdgeUrl);else guestIdCookieValue = guestIdCookie.value;\n    }\n    const browserIdCookieString = createCookieString(browserId, browserIdCookieValue, defaultCookieAttributes);\n    const guestIdCookieString = createCookieString(guestId, guestIdCookieValue, defaultCookieAttributes);\n    if (!browserIdCookie) request.headers.cookie = request.headers.cookie ? request.headers.cookie + '; ' + browserIdCookieString : browserIdCookieString;\n    if (!guestIdCookie) request.headers.cookie = request.headers.cookie ? request.headers.cookie + '; ' + guestIdCookieString : guestIdCookieString;\n    response.setHeader('Set-Cookie', [browserIdCookieString, guestIdCookieString]);\n  });\n  return _handleHttpCookie.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}