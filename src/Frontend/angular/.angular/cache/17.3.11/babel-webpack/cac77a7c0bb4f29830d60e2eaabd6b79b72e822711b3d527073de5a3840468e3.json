{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.languageError = exports.siteNameError = void 0;\nexports.getAppRootId = getAppRootId;\nconst constants_1 = require(\"../constants\");\n/** @private */\nexports.siteNameError = 'The site name must be a non-empty string';\n/** @private */\nexports.languageError = 'The language must be a non-empty string';\n/*\n * GraphQL query that returns the ID of the root item of the specified site and language\n */\nconst appRootQuery = /* GraphQL */`\n  query AppRootQuery($jssAppTemplateId: String!, $siteName: String!, $language: String!) {\n    layout(site: $siteName, routePath: \"/\", language: $language) {\n      homePage: item {\n        rootItem: ancestors(includeTemplateIDs: [$jssAppTemplateId]) {\n          id\n        }\n      }\n    }\n  }\n`;\n/**\n * Gets the ID of the JSS App root item for the specified site and language.\n * @param {GraphQLClient} client that fetches data from a GraphQL endpoint.\n * @param {string} siteName the name of the Sitecore site.\n * @param {string} language the item language version.\n * @param {string} [jssAppTemplateId] optional template ID of the app root item. If not\n * specified, the ID of the \"/sitecore/templates/Foundation/JavaScript Services/App\"\n * item is used.\n * @returns the root item ID of the JSS App in Sitecore. Returns null if the app root item is not found.\n * @throws {RangeError} if a valid site name value is not provided.\n * @throws {RangeError} if a valid language value is not provided.\n * @summary This function intentionally avoids throwing an error if a root item is not found,\n * leaving that decision up to implementations.\n */\nfunction getAppRootId(client, siteName, language, jssAppTemplateId) {\n  return __awaiter(this, void 0, void 0, function* () {\n    var _a, _b, _c, _d, _e, _f;\n    if (!siteName) {\n      throw new RangeError(exports.siteNameError);\n    }\n    if (!language) {\n      throw new RangeError(exports.languageError);\n    }\n    let fetchResponse = yield client.request(appRootQuery, {\n      jssAppTemplateId: jssAppTemplateId || constants_1.SitecoreTemplateId.JssApp,\n      siteName,\n      language\n    });\n    if (!((_c = (_b = (_a = fetchResponse === null || fetchResponse === void 0 ? void 0 : fetchResponse.layout) === null || _a === void 0 ? void 0 : _a.homePage) === null || _b === void 0 ? void 0 : _b.rootItem) === null || _c === void 0 ? void 0 : _c.length) && language !== 'en') {\n      fetchResponse = yield client.request(appRootQuery, {\n        jssAppTemplateId: jssAppTemplateId || constants_1.SitecoreTemplateId.JssApp,\n        siteName,\n        language: 'en'\n      });\n    }\n    if (!((_f = (_e = (_d = fetchResponse === null || fetchResponse === void 0 ? void 0 : fetchResponse.layout) === null || _d === void 0 ? void 0 : _d.homePage) === null || _e === void 0 ? void 0 : _e.rootItem) === null || _f === void 0 ? void 0 : _f.length)) {\n      return null;\n    }\n    return fetchResponse.layout.homePage.rootItem[0].id;\n  });\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}