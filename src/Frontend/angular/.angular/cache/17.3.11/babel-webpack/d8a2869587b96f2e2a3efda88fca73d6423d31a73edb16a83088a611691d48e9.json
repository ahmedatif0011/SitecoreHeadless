{"ast":null,"code":"var iterate = require('./lib/iterate.js'),\n  initState = require('./lib/state.js'),\n  terminator = require('./lib/terminator.js');\n\n// Public API\nmodule.exports = serialOrdered;\n// sorting helpers\nmodule.exports.ascending = ascending;\nmodule.exports.descending = descending;\n\n/**\n * Runs iterator over provided sorted array elements in series\n *\n * @param   {array|object} list - array or object (named list) to iterate over\n * @param   {function} iterator - iterator to run\n * @param   {function} sortMethod - custom sort function\n * @param   {function} callback - invoked when all elements processed\n * @returns {function} - jobs terminator\n */\nfunction serialOrdered(list, iterator, sortMethod, callback) {\n  var state = initState(list, sortMethod);\n  iterate(list, iterator, state, function iteratorHandler(error, result) {\n    if (error) {\n      callback(error, result);\n      return;\n    }\n    state.index++;\n\n    // are we there yet?\n    if (state.index < (state['keyedList'] || list).length) {\n      iterate(list, iterator, state, iteratorHandler);\n      return;\n    }\n\n    // done here\n    callback(null, state.results);\n  });\n  return terminator.bind(state, callback);\n}\n\n/*\n * -- Sort methods\n */\n\n/**\n * sort helper to sort array elements in ascending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/**\n * sort helper to sort array elements in descending order\n *\n * @param   {mixed} a - an item to compare\n * @param   {mixed} b - an item to compare\n * @returns {number} - comparison result\n */\nfunction descending(a, b) {\n  return -1 * ascending(a, b);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}