{"ast":null,"code":"import { Directive, Input } from '@angular/core';\nimport { BaseFieldDirective } from './base-field.directive';\nimport { DefaultEmptyFieldEditingComponent } from './default-empty-text-field-editing-placeholder.component';\nimport { MetadataKind } from '@sitecore-jss/sitecore-jss/editing';\nimport * as i0 from \"@angular/core\";\nexport let TextDirective = /*#__PURE__*/(() => {\n  class TextDirective extends BaseFieldDirective {\n    templateRef;\n    editable = true;\n    encode = true;\n    field;\n    /**\n     * Custom template to render in Pages in Metadata edit mode if field value is empty\n     */\n    emptyFieldEditingTemplate;\n    /**\n     * Default component to render in Pages in Metadata edit mode if field value is empty and emptyFieldEditingTemplate is not provided\n     */\n    defaultFieldEditingComponent;\n    constructor(viewContainer, templateRef) {\n      super(viewContainer);\n      this.templateRef = templateRef;\n      this.defaultFieldEditingComponent = DefaultEmptyFieldEditingComponent;\n    }\n    ngOnChanges(changes) {\n      if (changes.field || changes.editable || changes.encode) {\n        this.viewContainer.clear();\n        this.updateView();\n      }\n    }\n    updateView() {\n      if (!this.shouldRender()) {\n        super.renderEmpty();\n        return;\n      }\n      this.renderMetadata(MetadataKind.Open);\n      this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n      this.renderMetadata(MetadataKind.Close);\n      const field = this.field;\n      let editable = this.editable;\n      // can't use editable value if we want to output unencoded\n      if (!this.encode) {\n        editable = false;\n      }\n      const html = field.editable && editable ? field.editable : field.value;\n      const setDangerously = field.editable && editable || !this.encode;\n      this.viewRef.rootNodes.forEach(node => {\n        if (setDangerously) {\n          node.innerHTML = html;\n        } else {\n          node.textContent = html;\n        }\n      });\n    }\n    static ɵfac = function TextDirective_Factory(t) {\n      return new (t || TextDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: TextDirective,\n      selectors: [[\"\", \"scText\", \"\"]],\n      inputs: {\n        editable: [i0.ɵɵInputFlags.None, \"scTextEditable\", \"editable\"],\n        encode: [i0.ɵɵInputFlags.None, \"scTextEncode\", \"encode\"],\n        field: [i0.ɵɵInputFlags.None, \"scText\", \"field\"],\n        emptyFieldEditingTemplate: [i0.ɵɵInputFlags.None, \"scTextEmptyFieldEditingTemplate\", \"emptyFieldEditingTemplate\"]\n      },\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return TextDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy90ZXh0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssR0FNTixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUM3RyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7O0FBS2xFLE1BQU0sT0FBTyxhQUFjLFNBQVEsa0JBQWtCO0lBaUJFO0lBaEI1QixRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRWxCLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFFcEIsS0FBSyxDQUFZO0lBRWxDOztPQUVHO0lBQ3VDLHlCQUF5QixDQUF1QjtJQUUxRjs7T0FFRztJQUNPLDRCQUE0QixDQUFnQjtJQUV0RCxZQUFZLGFBQStCLEVBQVUsV0FBaUM7UUFDcEYsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRDhCLGdCQUFXLEdBQVgsV0FBVyxDQUFzQjtRQUVwRixJQUFJLENBQUMsNEJBQTRCLEdBQUcsaUNBQWlDLENBQUM7SUFDeEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUUzQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDcEIsQ0FBQztJQUNILENBQUM7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQztZQUN6QixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEIsT0FBTztRQUNULENBQUM7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUU3QiwwREFBMEQ7UUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQixRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ25CLENBQUM7UUFFRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN2RSxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRXBFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3RDLElBQUksY0FBYyxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztZQUMxQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO3dHQTFEVSxhQUFhOzRGQUFiLGFBQWE7OzRGQUFiLGFBQWE7a0JBSHpCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7aUJBQ3JCOytHQUUwQixRQUFRO3NCQUFoQyxLQUFLO3VCQUFDLGdCQUFnQjtnQkFFQSxNQUFNO3NCQUE1QixLQUFLO3VCQUFDLGNBQWM7Z0JBRUosS0FBSztzQkFBckIsS0FBSzt1QkFBQyxRQUFRO2dCQUsyQix5QkFBeUI7c0JBQWxFLEtBQUs7dUJBQUMsaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsXHJcbiAgSW5wdXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIFNpbXBsZUNoYW5nZXMsXHJcbiAgVGVtcGxhdGVSZWYsXHJcbiAgVHlwZSxcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUZXh0RmllbGQgfSBmcm9tICcuL3JlbmRlcmluZy1maWVsZCc7XHJcbmltcG9ydCB7IEJhc2VGaWVsZERpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS1maWVsZC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBEZWZhdWx0RW1wdHlGaWVsZEVkaXRpbmdDb21wb25lbnQgfSBmcm9tICcuL2RlZmF1bHQtZW1wdHktdGV4dC1maWVsZC1lZGl0aW5nLXBsYWNlaG9sZGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE1ldGFkYXRhS2luZCB9IGZyb20gJ0BzaXRlY29yZS1qc3Mvc2l0ZWNvcmUtanNzL2VkaXRpbmcnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbc2NUZXh0XScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUZXh0RGlyZWN0aXZlIGV4dGVuZHMgQmFzZUZpZWxkRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoJ3NjVGV4dEVkaXRhYmxlJykgZWRpdGFibGUgPSB0cnVlO1xyXG5cclxuICBASW5wdXQoJ3NjVGV4dEVuY29kZScpIGVuY29kZSA9IHRydWU7XHJcblxyXG4gIEBJbnB1dCgnc2NUZXh0JykgZmllbGQ6IFRleHRGaWVsZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3VzdG9tIHRlbXBsYXRlIHRvIHJlbmRlciBpbiBQYWdlcyBpbiBNZXRhZGF0YSBlZGl0IG1vZGUgaWYgZmllbGQgdmFsdWUgaXMgZW1wdHlcclxuICAgKi9cclxuICBASW5wdXQoJ3NjVGV4dEVtcHR5RmllbGRFZGl0aW5nVGVtcGxhdGUnKSBlbXB0eUZpZWxkRWRpdGluZ1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjx1bmtub3duPjtcclxuXHJcbiAgLyoqXHJcbiAgICogRGVmYXVsdCBjb21wb25lbnQgdG8gcmVuZGVyIGluIFBhZ2VzIGluIE1ldGFkYXRhIGVkaXQgbW9kZSBpZiBmaWVsZCB2YWx1ZSBpcyBlbXB0eSBhbmQgZW1wdHlGaWVsZEVkaXRpbmdUZW1wbGF0ZSBpcyBub3QgcHJvdmlkZWRcclxuICAgKi9cclxuICBwcm90ZWN0ZWQgZGVmYXVsdEZpZWxkRWRpdGluZ0NvbXBvbmVudDogVHlwZTx1bmtub3duPjtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZiwgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8dW5rbm93bj4pIHtcclxuICAgIHN1cGVyKHZpZXdDb250YWluZXIpO1xyXG4gICAgdGhpcy5kZWZhdWx0RmllbGRFZGl0aW5nQ29tcG9uZW50ID0gRGVmYXVsdEVtcHR5RmllbGRFZGl0aW5nQ29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuZmllbGQgfHwgY2hhbmdlcy5lZGl0YWJsZSB8fCBjaGFuZ2VzLmVuY29kZSkge1xyXG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuXHJcbiAgICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYgKCF0aGlzLnNob3VsZFJlbmRlcigpKSB7XHJcbiAgICAgIHN1cGVyLnJlbmRlckVtcHR5KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJlbmRlck1ldGFkYXRhKE1ldGFkYXRhS2luZC5PcGVuKTtcclxuICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZik7XHJcbiAgICB0aGlzLnJlbmRlck1ldGFkYXRhKE1ldGFkYXRhS2luZC5DbG9zZSk7XHJcblxyXG4gICAgY29uc3QgZmllbGQgPSB0aGlzLmZpZWxkO1xyXG4gICAgbGV0IGVkaXRhYmxlID0gdGhpcy5lZGl0YWJsZTtcclxuXHJcbiAgICAvLyBjYW4ndCB1c2UgZWRpdGFibGUgdmFsdWUgaWYgd2Ugd2FudCB0byBvdXRwdXQgdW5lbmNvZGVkXHJcbiAgICBpZiAoIXRoaXMuZW5jb2RlKSB7XHJcbiAgICAgIGVkaXRhYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaHRtbCA9IGZpZWxkLmVkaXRhYmxlICYmIGVkaXRhYmxlID8gZmllbGQuZWRpdGFibGUgOiBmaWVsZC52YWx1ZTtcclxuICAgIGNvbnN0IHNldERhbmdlcm91c2x5ID0gKGZpZWxkLmVkaXRhYmxlICYmIGVkaXRhYmxlKSB8fCAhdGhpcy5lbmNvZGU7XHJcblxyXG4gICAgdGhpcy52aWV3UmVmLnJvb3ROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgIGlmIChzZXREYW5nZXJvdXNseSkge1xyXG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBub2RlLnRleHRDb250ZW50ID0gaHRtbDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}