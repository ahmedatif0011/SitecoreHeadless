{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestDictionaryService = void 0;\nconst axios_fetcher_1 = require(\"../axios-fetcher\");\nconst data_fetcher_1 = require(\"../data-fetcher\");\nconst dictionary_service_1 = require(\"./dictionary-service\");\nconst debug_1 = __importDefault(require(\"../debug\"));\n/**\n * Fetch dictionary data using the Sitecore Dictionary Service REST API.\n * Uses Axios as the default data fetcher (@see AxiosDataFetcher).\n * @augments DictionaryServiceBase\n */\nclass RestDictionaryService extends dictionary_service_1.DictionaryServiceBase {\n  constructor(options) {\n    super(options);\n    this.options = options;\n  }\n  /**\n   * Provides default @see AxiosDataFetcher data fetcher\n   */\n  get defaultFetcher() {\n    const dataFetcher = new axios_fetcher_1.AxiosDataFetcher({\n      debugger: debug_1.default.dictionary,\n      // CORS issue: Sitecore provides 'Access-Control-Allow-Origin' as wildcard '*', so we can't include credentials for the dictionary service\n      withCredentials: false\n    });\n    return url => dataFetcher.fetch(url);\n  }\n  /**\n   * Fetch dictionary data for a language.\n   * @param {string} language the language to be used to fetch the dictionary\n   * @returns {Promise<DictionaryPhrases>} dictionary phrases\n   */\n  fetchDictionaryData(language) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const endpoint = this.getUrl(language);\n      const cachedValue = this.getCacheValue(endpoint);\n      if (cachedValue) {\n        debug_1.default.dictionary('using cached dictionary data for %s %s', language, this.options.siteName);\n        return cachedValue;\n      }\n      debug_1.default.dictionary('fetching dictionary data for %s %s', language, this.options.siteName);\n      const fetcher = this.options.dataFetcher || this.defaultFetcher;\n      const response = yield (0, data_fetcher_1.fetchData)(endpoint, fetcher, {\n        sc_apikey: this.options.apiKey\n      });\n      return this.setCacheValue(endpoint, response.phrases);\n    });\n  }\n  /**\n   * Generate dictionary service url\n   * @param {string} language the language to be used to fetch the dictionary\n   * @returns {string} dictionary service url\n   */\n  getUrl(language) {\n    return `${this.options.apiHost}/sitecore/api/jss/dictionary/${this.options.siteName}/${language}`;\n  }\n}\nexports.RestDictionaryService = RestDictionaryService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}