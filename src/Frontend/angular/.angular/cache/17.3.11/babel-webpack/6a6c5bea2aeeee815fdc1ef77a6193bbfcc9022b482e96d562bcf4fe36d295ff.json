{"ast":null,"code":"import { makeStateKey, StateKey, TransferState } from '@angular/core';\nimport { of as observableOf, EMPTY } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport const dictionaryStateKey = makeStateKey('dictionary');\nexport let JssTranslationServerLoaderService = /*#__PURE__*/(() => {\n  class JssTranslationServerLoaderService {\n    serverViewBag;\n    transferState;\n    constructor(\n    // this initial state from sitecore is injected by server.bundle for \"integrated\" mode\n    serverViewBag, transferState) {\n      this.serverViewBag = serverViewBag;\n      this.transferState = transferState;\n    }\n    getTranslation(_lang) {\n      // read initial dictionary from data injected via server.bundle wrapper\n      const dictionary = this.serverViewBag.dictionary;\n      // set the dictionary in transfer state for the client\n      // since for ng-translate there is no obvious way to pass the server side dictionary to the client\n      // https://github.com/ngx-translate/core/issues/1207#issuecomment-700741671\n      this.transferState.set(dictionaryStateKey, dictionary);\n      if (dictionary) {\n        return observableOf(dictionary);\n      }\n      console.warn('Dictionary was not present in SSR viewbag. Translations will not be server-side rendered.');\n      return EMPTY;\n    }\n    static ɵfac = function JssTranslationServerLoaderService_Factory(t) {\n      return new (t || JssTranslationServerLoaderService)(i0.ɵɵinject('JSS_SERVER_VIEWBAG'), i0.ɵɵinject(i0.TransferState));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JssTranslationServerLoaderService,\n      factory: JssTranslationServerLoaderService.ɵfac\n    });\n  }\n  return JssTranslationServerLoaderService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}