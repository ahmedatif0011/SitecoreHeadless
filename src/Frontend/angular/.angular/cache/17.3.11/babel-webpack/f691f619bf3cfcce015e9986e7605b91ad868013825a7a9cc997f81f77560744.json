{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLWebSocketClient = exports.gql = exports.resolveRequestDocument = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\nvar cross_fetch_1 = __importStar(require(\"cross-fetch\")),\n  CrossFetch = cross_fetch_1;\nvar parser_1 = require(\"graphql/language/parser\");\nvar printer_1 = require(\"graphql/language/printer\");\nvar createRequestBody_1 = __importDefault(require(\"./createRequestBody\"));\nvar defaultJsonSerializer_1 = require(\"./defaultJsonSerializer\");\nvar parseArgs_1 = require(\"./parseArgs\");\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"ClientError\", {\n  enumerable: true,\n  get: function () {\n    return types_1.ClientError;\n  }\n});\n/**\n * Convert the given headers configuration into a plain object.\n */\nvar resolveHeaders = function (headers) {\n  var oHeaders = {};\n  if (headers) {\n    if (typeof Headers !== 'undefined' && headers instanceof Headers || headers instanceof CrossFetch.Headers) {\n      oHeaders = HeadersInstanceToPlainObject(headers);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (_a) {\n        var name = _a[0],\n          value = _a[1];\n        oHeaders[name] = value;\n      });\n    } else {\n      oHeaders = headers;\n    }\n  }\n  return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nvar queryCleanner = function (str) {\n  return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim();\n};\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nvar buildGetQueryParams = function (_a) {\n  var query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    jsonSerializer = _a.jsonSerializer;\n  if (!Array.isArray(query)) {\n    var search = [\"query=\" + encodeURIComponent(queryCleanner(query))];\n    if (variables) {\n      search.push(\"variables=\" + encodeURIComponent(jsonSerializer.stringify(variables)));\n    }\n    if (operationName) {\n      search.push(\"operationName=\" + encodeURIComponent(operationName));\n    }\n    return search.join('&');\n  }\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected');\n  }\n  // Batch support\n  var payload = query.reduce(function (accu, currentQuery, index) {\n    accu.push({\n      query: queryCleanner(currentQuery),\n      variables: variables ? jsonSerializer.stringify(variables[index]) : undefined\n    });\n    return accu;\n  }, []);\n  return \"query=\" + encodeURIComponent(jsonSerializer.stringify(payload));\n};\n/**\n * Fetch data using POST method\n */\nvar post = function (_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    headers = _a.headers,\n    fetch = _a.fetch,\n    fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var body;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          body = createRequestBody_1.default(query, variables, operationName, fetchOptions.jsonSerializer);\n          return [4 /*yield*/, fetch(url, __assign({\n            method: 'POST',\n            headers: __assign(__assign({}, typeof body === 'string' ? {\n              'Content-Type': 'application/json'\n            } : {}), headers),\n            body: body\n          }, fetchOptions))];\n        case 1:\n          return [2 /*return*/, _b.sent()];\n      }\n    });\n  });\n};\n/**\n * Fetch data using GET method\n */\nvar get = function (_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    headers = _a.headers,\n    fetch = _a.fetch,\n    fetchOptions = _a.fetchOptions;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var queryParams;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          queryParams = buildGetQueryParams({\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            jsonSerializer: fetchOptions.jsonSerializer\n          });\n          return [4 /*yield*/, fetch(url + \"?\" + queryParams, __assign({\n            method: 'GET',\n            headers: headers\n          }, fetchOptions))];\n        case 1:\n          return [2 /*return*/, _b.sent()];\n      }\n    });\n  });\n};\n/**\n * GraphQL Client.\n */\nvar GraphQLClient = /** @class */function () {\n  function GraphQLClient(url, options) {\n    this.url = url;\n    this.options = options || {};\n  }\n  GraphQLClient.prototype.rawRequest = function (queryOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rawRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, operationName;\n      return __generator(this, function (_d) {\n        rawRequestOptions = parseArgs_1.parseRawRequestArgs(queryOrOptions, variables, requestHeaders);\n        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n        url = this.url;\n        if (rawRequestOptions.signal !== undefined) {\n          fetchOptions.signal = rawRequestOptions.signal;\n        }\n        operationName = resolveRequestDocument(rawRequestOptions.query).operationName;\n        return [2 /*return*/, makeRequest({\n          url: url,\n          query: rawRequestOptions.query,\n          variables: rawRequestOptions.variables,\n          headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),\n          operationName: operationName,\n          fetch: fetch,\n          method: method,\n          fetchOptions: fetchOptions\n        })];\n      });\n    });\n  };\n  GraphQLClient.prototype.request = function (documentOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, _d, query, operationName, data;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            requestOptions = parseArgs_1.parseRequestArgs(documentOrOptions, variables, requestHeaders);\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n            if (requestOptions.signal !== undefined) {\n              fetchOptions.signal = requestOptions.signal;\n            }\n            _d = resolveRequestDocument(requestOptions.document), query = _d.query, operationName = _d.operationName;\n            return [4 /*yield*/, makeRequest({\n              url: url,\n              query: query,\n              variables: requestOptions.variables,\n              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),\n              operationName: operationName,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n          case 1:\n            data = _e.sent().data;\n            return [2 /*return*/, data];\n        }\n      });\n    });\n  };\n  GraphQLClient.prototype.batchRequests = function (documentsOrOptions, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batchRequestOptions, _a, headers, _b, fetch, _c, method, fetchOptions, url, queries, variables, data;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            batchRequestOptions = parseArgs_1.parseBatchRequestArgs(documentsOrOptions, requestHeaders);\n            _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\"]);\n            url = this.url;\n            if (batchRequestOptions.signal !== undefined) {\n              fetchOptions.signal = batchRequestOptions.signal;\n            }\n            queries = batchRequestOptions.documents.map(function (_a) {\n              var document = _a.document;\n              return resolveRequestDocument(document).query;\n            });\n            variables = batchRequestOptions.documents.map(function (_a) {\n              var variables = _a.variables;\n              return variables;\n            });\n            return [4 /*yield*/, makeRequest({\n              url: url,\n              query: queries,\n              variables: variables,\n              headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),\n              operationName: undefined,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions\n            })];\n          case 1:\n            data = _d.sent().data;\n            return [2 /*return*/, data];\n        }\n      });\n    });\n  };\n  GraphQLClient.prototype.setHeaders = function (headers) {\n    this.options.headers = headers;\n    return this;\n  };\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  GraphQLClient.prototype.setHeader = function (key, value) {\n    var _a;\n    var headers = this.options.headers;\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value;\n    } else {\n      this.options.headers = (_a = {}, _a[key] = value, _a);\n    }\n    return this;\n  };\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  GraphQLClient.prototype.setEndpoint = function (value) {\n    this.url = value;\n    return this;\n  };\n  return GraphQLClient;\n}();\nexports.GraphQLClient = GraphQLClient;\nfunction makeRequest(_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    headers = _a.headers,\n    operationName = _a.operationName,\n    fetch = _a.fetch,\n    _b = _a.method,\n    method = _b === void 0 ? 'POST' : _b,\n    fetchOptions = _a.fetchOptions;\n  return __awaiter(this, void 0, void 0, function () {\n    var fetcher, isBathchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, headers_1, status_1, errors, rest, data, errorResult;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          fetcher = method.toUpperCase() === 'POST' ? post : get;\n          isBathchingQuery = Array.isArray(query);\n          return [4 /*yield*/, fetcher({\n            url: url,\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            headers: headers,\n            fetch: fetch,\n            fetchOptions: fetchOptions\n          })];\n        case 1:\n          response = _c.sent();\n          return [4 /*yield*/, getResult(response, fetchOptions.jsonSerializer)];\n        case 2:\n          result = _c.sent();\n          successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n            var data = _a.data;\n            return !data;\n          }) : !!result.data;\n          successfullyPassedErrorPolicy = !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore';\n          if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n            headers_1 = response.headers, status_1 = response.status;\n            errors = result.errors, rest = __rest(result, [\"errors\"]);\n            data = fetchOptions.errorPolicy === 'ignore' ? rest : result;\n            return [2 /*return*/, __assign(__assign({}, isBathchingQuery ? {\n              data: data\n            } : data), {\n              headers: headers_1,\n              status: status_1\n            })];\n          } else {\n            errorResult = typeof result === 'string' ? {\n              error: result\n            } : result;\n            throw new types_1.ClientError(__assign(__assign({}, errorResult), {\n              status: response.status,\n              headers: response.headers\n            }), {\n              query: query,\n              variables: variables\n            });\n          }\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nfunction rawRequest(urlOrOptions, query, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRawRequestExtendedArgs(urlOrOptions, query, variables, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.rawRequest(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.rawRequest = rawRequest;\nfunction request(urlOrOptions, document, variables, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRequestExtendedArgs(urlOrOptions, document, variables, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.request(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.request = request;\nfunction batchRequests(urlOrOptions, documents, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseBatchRequestsExtendedArgs(urlOrOptions, documents, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.batchRequests(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.batchRequests = batchRequests;\nexports.default = request;\n/**\n * todo\n */\nfunction getResult(response, jsonSerializer) {\n  if (jsonSerializer === void 0) {\n    jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var contentType, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          response.headers.forEach(function (value, key) {\n            if (key.toLowerCase() === 'content-type') {\n              contentType = value;\n            }\n          });\n          if (!(contentType && contentType.toLowerCase().startsWith('application/json'))) return [3 /*break*/, 2];\n          _b = (_a = jsonSerializer).parse;\n          return [4 /*yield*/, response.text()];\n        case 1:\n          return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n        case 2:\n          return [2 /*return*/, response.text()];\n      }\n    });\n  });\n}\n/**\n * helpers\n */\nfunction extractOperationName(document) {\n  var _a;\n  var operationName = undefined;\n  var operationDefinitions = document.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  });\n  if (operationDefinitions.length === 1) {\n    operationName = (_a = operationDefinitions[0].name) === null || _a === void 0 ? void 0 : _a.value;\n  }\n  return operationName;\n}\nfunction resolveRequestDocument(document) {\n  if (typeof document === 'string') {\n    var operationName_1 = undefined;\n    try {\n      var parsedDocument = parser_1.parse(document);\n      operationName_1 = extractOperationName(parsedDocument);\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n    return {\n      query: document,\n      operationName: operationName_1\n    };\n  }\n  var operationName = extractOperationName(document);\n  return {\n    query: printer_1.print(document),\n    operationName: operationName\n  };\n}\nexports.resolveRequestDocument = resolveRequestDocument;\nfunction callOrIdentity(value) {\n  return typeof value === 'function' ? value() : value;\n}\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nfunction gql(chunks) {\n  var variables = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    variables[_i - 1] = arguments[_i];\n  }\n  return chunks.reduce(function (accumulator, chunk, index) {\n    return \"\" + accumulator + chunk + (index in variables ? variables[index] : '');\n  }, '');\n}\nexports.gql = gql;\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers) {\n  var o = {};\n  headers.forEach(function (v, k) {\n    o[k] = v;\n  });\n  return o;\n}\nvar graphql_ws_1 = require(\"./graphql-ws\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", {\n  enumerable: true,\n  get: function () {\n    return graphql_ws_1.GraphQLWebSocketClient;\n  }\n});\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}