{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fetchBrowserIdFromEdgeProxy } from '../browser-id/fetch-browser-id-from-edge-proxy';\nimport { getGuestId } from '../init/get-guest-id';\nimport { getCookieValueFromMiddlewareRequest } from './get-cookie-value-from-middleware-request';\nimport { getDefaultCookieAttributes } from './get-default-cookie-attributes';\n/**\n * Handles the Middleware Request and sets a cookie with the provided 'cookieName' and 'cookieValue'.\n * If 'cookieValue' is not present in the request, it fetches it using the 'fetchBrowserIdFromEdgeProxy' function\n * and stores it in the request's cookies with the specified 'defaultCookieAttributes'.\n *\n * @param request - The Middleware Request object.\n * @param response - The Middleware Response object.\n * @param options - The settings object containing configuration options.\n * @param defaultCookieAttributes - The default attributes for the cookie.\n *\n * @throws [IE-0003] - This exception is thrown when fetchBrowserIdFromEdgeProxy wasn't able to retrieve a browserId.\n *\n */\nexport function handleNextJsMiddlewareCookie(_x, _x2, _x3, _x4) {\n  return _handleNextJsMiddlewareCookie.apply(this, arguments);\n}\nfunction _handleNextJsMiddlewareCookie() {\n  _handleNextJsMiddlewareCookie = _asyncToGenerator(function* (request, response, options, timeout) {\n    const {\n      browserId,\n      guestId\n    } = options.cookieSettings.cookieNames;\n    let browserIdCookieValue = getCookieValueFromMiddlewareRequest(request, browserId);\n    let guestIdCookieValue = getCookieValueFromMiddlewareRequest(request, guestId);\n    if (!browserIdCookieValue) {\n      const cookieValues = yield fetchBrowserIdFromEdgeProxy(options.sitecoreEdgeUrl, options.sitecoreEdgeContextId, timeout);\n      browserIdCookieValue = cookieValues.browserId;\n      guestIdCookieValue = cookieValues.guestId;\n    } else if (!guestIdCookieValue) guestIdCookieValue = yield getGuestId(browserIdCookieValue, options.sitecoreEdgeContextId, options.sitecoreEdgeUrl);\n    const defaultCookieAttributes = getDefaultCookieAttributes(options.cookieSettings.cookieExpiryDays, options.cookieSettings.cookieDomain);\n    request.cookies.set(browserId, browserIdCookieValue, defaultCookieAttributes);\n    request.cookies.set(guestId, guestIdCookieValue, defaultCookieAttributes);\n    response.cookies.set(browserId, browserIdCookieValue, defaultCookieAttributes);\n    response.cookies.set(guestId, guestIdCookieValue, defaultCookieAttributes);\n  });\n  return _handleNextJsMiddlewareCookie.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}