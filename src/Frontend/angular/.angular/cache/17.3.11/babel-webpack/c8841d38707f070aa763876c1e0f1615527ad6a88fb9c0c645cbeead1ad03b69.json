{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\n/* eslint-disable no-shadow, no-console */\nimport { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { JssMetaService } from '../../jss-meta.service';\nvar LayoutState = /*#__PURE__*/function (LayoutState) {\n  LayoutState[LayoutState[\"Layout\"] = 0] = \"Layout\";\n  LayoutState[LayoutState[\"NotFound\"] = 1] = \"NotFound\";\n  LayoutState[LayoutState[\"Error\"] = 2] = \"Error\";\n  return LayoutState;\n}(LayoutState || {});\nlet LayoutComponent = class LayoutComponent {\n  activatedRoute;\n  meta;\n  route;\n  state;\n  LayoutState = LayoutState;\n  subscription;\n  errorContextData;\n  constructor(activatedRoute, meta) {\n    this.activatedRoute = activatedRoute;\n    this.meta = meta;\n  }\n  ngOnInit() {\n    // route data is populated by the JssRouteResolver\n    this.subscription = this.activatedRoute.data.subscribe(data => {\n      if (!data.jssState) {\n        this.state = LayoutState.NotFound;\n        return;\n      }\n      if (data.jssState.sitecore && data.jssState.sitecore.route) {\n        this.route = data.jssState.sitecore.route;\n        this.setMetadata(this.route.fields);\n        this.state = LayoutState.Layout;\n      }\n      if (data.jssState.routeFetchError) {\n        if (data.jssState.routeFetchError.status >= 400 && data.jssState.routeFetchError.status < 500) {\n          this.state = LayoutState.NotFound;\n        } else {\n          this.state = LayoutState.Error;\n        }\n        this.errorContextData = data.jssState.routeFetchError.data && data.jssState.routeFetchError.data.sitecore;\n      }\n    });\n  }\n  ngOnDestroy() {\n    // important to unsubscribe when the component is destroyed\n    this.subscription.unsubscribe();\n  }\n  setMetadata(routeFields) {\n    // set page title, if it exists\n    if (routeFields && routeFields.pageTitle) {\n      this.meta.setTitle(routeFields.pageTitle.value || 'Page');\n    }\n  }\n  onPlaceholderLoaded(_placeholderName) {\n    // you may optionally hook to the loaded event for a placeholder,\n    // which can be useful for analytics and other DOM-based things that need to know when a placeholder's content is available.\n  }\n};\nLayoutComponent = __decorate([Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html'\n}), __metadata(\"design:paramtypes\", [ActivatedRoute, JssMetaService])], LayoutComponent);\nexport { LayoutComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}