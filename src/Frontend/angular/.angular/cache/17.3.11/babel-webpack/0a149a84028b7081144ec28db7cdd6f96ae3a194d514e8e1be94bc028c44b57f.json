{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DefaultEditFrameButtons = exports.DefaultEditFrameButton = exports.DefaultEditFrameButtonIds = void 0;\nexports.mapButtonToCommand = mapButtonToCommand;\nexports.commandBuilder = commandBuilder;\nexports.DefaultEditFrameButtonIds = {\n  edit: '{70C4EED5-D4CD-4D7D-9763-80C42504F5E7}'\n};\nexports.DefaultEditFrameButton = {\n  insert: {\n    header: 'Insert New',\n    icon: '/~/icon/Office/16x16/insert_from_template.png',\n    click: 'webedit:new',\n    tooltip: 'Insert a new item'\n  },\n  editRelatedItem: {\n    header: 'Edit the related item',\n    icon: '/~/icon/Office/16x16/cubes.png',\n    click: 'webedit:open',\n    // Command in Sitecore, 'chrome:common:edititem({command:\"webedit:open\"})',\n    tooltip: 'Edit the related item in the Content Editor.'\n  },\n  edit: {\n    header: 'Edit Item',\n    icon: '/~/icon/people/16x16/cubes_blue.png',\n    fields: ['Title', 'Text'],\n    tooltip: 'Edit the item fields.'\n  }\n};\nexports.DefaultEditFrameButtons = [exports.DefaultEditFrameButton.editRelatedItem, exports.DefaultEditFrameButton.insert, exports.DefaultEditFrameButton.edit];\n/**\n * @param {WebEditButton | FieldEditButton} button the button to determine the type of\n */\nfunction isWebEditButton(button) {\n  return button.click !== undefined;\n}\n/**\n * Map the edit button types to chrome data\n * @param {EditButtonTypes } button the edit button to build a ChromeCommand for\n * @param {string} itemId the ID of the item the EditFrame is associated with\n * @param {Record<string, string | number | boolean | undefined | null>} frameParameters additional parameters passed to the EditFrame\n */\nfunction mapButtonToCommand(button, itemId, frameParameters) {\n  if (button === '|' || button.isDivider) {\n    return {\n      click: 'chrome:dummy',\n      header: 'Separator',\n      icon: '',\n      isDivider: true,\n      tooltip: null,\n      type: 'separator'\n    };\n  } else if (isWebEditButton(button)) {\n    return commandBuilder(button, itemId, frameParameters);\n  } else {\n    const fieldsString = button.fields.join('|');\n    const editButton = Object.assign({\n      click: `webedit:fieldeditor(command=${exports.DefaultEditFrameButtonIds.edit},fields=${fieldsString})`\n    }, button);\n    return commandBuilder(editButton, itemId, frameParameters);\n  }\n}\n/**\n * Build a ChromeCommand from a web edit button. Merging the parameters from the button, frame and id\n * @param {WebEditButton } button the web edit button to build a ChromeCommand for\n * @param {string} itemId the ID of the item the EditFrame is associated with\n * @param {Record<string, string>} frameParameters additional parameters passed to the EditFrame\n */\nfunction commandBuilder(button, itemId, frameParameters) {\n  if (!button.click) {\n    return Object.assign({\n      isDivider: false,\n      type: button.type || null,\n      header: button.header || '',\n      icon: button.icon || '',\n      tooltip: button.tooltip || ''\n    }, button);\n  } else if (button.click.startsWith('javascript:') || button.click.startsWith('chrome:')) {\n    return Object.assign({\n      isDivider: false,\n      type: button.type || null,\n      header: button.header || '',\n      icon: button.icon || '',\n      tooltip: button.tooltip || ''\n    }, button);\n  } else {\n    if (!itemId) {\n      return Object.assign({\n        isDivider: false,\n        type: button.type || null,\n        header: button.header || '',\n        icon: button.icon || '',\n        tooltip: button.tooltip || ''\n      }, button);\n    } else {\n      let message = button.click;\n      let parameters = {};\n      // Extract any parameters already in the command\n      const length = button.click.indexOf('(');\n      if (length >= 0) {\n        const end = button.click.indexOf(')');\n        if (end < 0) {\n          throw new Error('Message with arguments must end with \")\".');\n        }\n        parameters = button.click.substring(length + 1, end).split(',').map(_ => _.trim()).reduce((previous, current) => {\n          const parts = current.split('=');\n          if (parts.length < 2) {\n            previous[parts[0]] = '';\n          } else {\n            previous[parts[0]] = parts[1];\n          }\n          return previous;\n        }, {});\n        message = button.click.substring(0, length);\n      }\n      parameters.id = itemId;\n      if (button.parameters) {\n        Object.keys(button.parameters).forEach(_ => {\n          var _a;\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          parameters[_] = ((_a = button.parameters[_]) === null || _a === void 0 ? void 0 : _a.toString()) || '';\n        });\n      }\n      if (frameParameters) {\n        Object.keys(frameParameters).forEach(_ => {\n          var _a;\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          parameters[_] = ((_a = frameParameters[_]) === null || _a === void 0 ? void 0 : _a.toString()) || '';\n        });\n      }\n      const parameterString = Object.keys(parameters).map(_ => `${_}=${parameters[_]}`).join(', ');\n      const click = `${message}(${parameterString})`;\n      return {\n        isDivider: false,\n        click: `javascript:Sitecore.PageModes.PageEditor.postRequest('${click}',null,false)`,\n        header: button.header || '',\n        icon: button.icon || '',\n        tooltip: button.tooltip || '',\n        type: button.type || null\n      };\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}