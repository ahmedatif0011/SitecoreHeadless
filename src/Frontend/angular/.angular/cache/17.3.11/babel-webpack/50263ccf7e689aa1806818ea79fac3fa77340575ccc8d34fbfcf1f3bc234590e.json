{"ast":null,"code":"import { APP_ID, TransferState } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RoutingModule } from './routing/routing.module';\nimport { JssLayoutService } from './layout/jss-layout.service';\nimport { AppComponentsModule } from './components/app-components.module';\nimport { AppComponent } from './app.component';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { JssTranslationClientLoaderService } from './i18n/jss-translation-client-loader.service';\nimport { JssTranslationLoaderService } from './i18n/jss-translation-loader.service';\nimport { GraphQLModule } from './jss-graphql.module';\nimport { JssMetaService } from './jss-meta.service';\nimport { JssContextService } from './jss-context.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    static ɵfac = function AppModule_Factory(t) {\n      return new (t || AppModule)();\n    };\n    static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: AppModule,\n      bootstrap: [AppComponent]\n    });\n    static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [\n      // The token is needed in cases when multiple applications are bootstrapped on a page\n      {\n        provide: APP_ID,\n        useValue: 'my-app'\n      }, JssContextService, JssLayoutService, JssMetaService,\n      // IMPORTANT: you must set the base href with this token, not a <base> tag in the HTML.\n      // the Sitecore Experience Editor will not work correctly when a base tag is used.\n      {\n        provide: APP_BASE_HREF,\n        useValue: '/'\n      }],\n      imports: [HttpClientModule, GraphQLModule, RoutingModule, TranslateModule.forRoot({\n        loader: {\n          provide: TranslateLoader,\n          useFactory: transferState => new JssTranslationClientLoaderService(new JssTranslationLoaderService(), transferState),\n          deps: [TransferState]\n        }\n      }), AppComponentsModule]\n    });\n  }\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}