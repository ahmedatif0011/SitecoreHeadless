{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { flattenObject, isShortISODateString, isValidEmail } from '@sitecore-cloudsdk/utils';\nimport { BaseEvent } from '../base-event';\nimport { ErrorMessages } from '../../consts';\nimport { MAX_EXT_ATTRIBUTES } from '../consts';\nexport class IdentityEvent extends BaseEvent {\n  /**\n   * A class that extends from {@link BaseEvent} and has all the required functionality to send a VIEW event\n   *\n   * @param args - Unified object containing the required properties\n   */\n  constructor(args) {\n    const {\n      channel,\n      currency,\n      language,\n      page,\n      extensionData\n    } = args.identityData;\n    super({\n      channel,\n      currency,\n      language,\n      page\n    }, args.id);\n    this.extensionData = {};\n    this.numberOfExtensionDataProperties = 0;\n    this.validateAttributes(args.identityData);\n    this.identityData = args.identityData;\n    this.sendEvent = args.sendEvent;\n    this.settings = args.settings;\n    if (extensionData) this.extensionData = flattenObject({\n      object: extensionData\n    });\n    this.numberOfExtensionDataProperties = Object.entries(this.extensionData).length;\n    if (this.numberOfExtensionDataProperties > MAX_EXT_ATTRIBUTES) throw new Error(ErrorMessages.IV_0005);\n  }\n  /**\n   * Function that validates the identifiers object, email and date attributes for CDN users\n   *  * @param identityData - The data to be validated\n   */\n  validateAttributes(identityData) {\n    if (identityData.identifiers.length === 0) throw new Error(ErrorMessages.MV_0003);\n    if (identityData.dob !== undefined && !isShortISODateString(identityData.dob)) throw new Error(ErrorMessages.IV_0002);\n    identityData.identifiers.forEach(identifier => {\n      if (identifier.expiryDate && !isShortISODateString(identifier.expiryDate)) throw new Error(ErrorMessages.IV_0004);\n    });\n    if (identityData.email && !isValidEmail(identityData.email)) throw new Error(ErrorMessages.IV_0003);\n  }\n  /**\n   * A function that maps the identity event input data with the payload sent to the API\n   * @returns - The payload object\n   */\n  mapAttributes() {\n    const identityPayload = {\n      city: this.identityData.city,\n      country: this.identityData.country,\n      dob: this.identityData.dob,\n      email: this.identityData.email,\n      firstname: this.identityData.firstName,\n      gender: this.identityData.gender,\n      identifiers: this.identityData.identifiers.map(value => {\n        return {\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          expiry_date: value.expiryDate,\n          id: value.id,\n          provider: value.provider\n        };\n      }),\n      lastname: this.identityData.lastName,\n      mobile: this.identityData.mobile,\n      phone: this.identityData.phone,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      postal_code: this.identityData.postalCode,\n      state: this.identityData.state,\n      street: this.identityData.street,\n      title: this.identityData.title,\n      type: 'IDENTITY'\n    };\n    if (this.numberOfExtensionDataProperties > 0) identityPayload.ext = this.extensionData;\n    return identityPayload;\n  }\n  /**\n   * Sends the event to Sitecore EP\n   * @returns - A promise that resolves with either the Sitecore EP response object or null\n   */\n  send() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const baseAttr = _this.mapBaseEventPayload();\n      const eventAttrs = _this.mapAttributes();\n      const fetchBody = Object.assign({}, eventAttrs, baseAttr);\n      return yield _this.sendEvent(fetchBody, _this.settings);\n    })();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}