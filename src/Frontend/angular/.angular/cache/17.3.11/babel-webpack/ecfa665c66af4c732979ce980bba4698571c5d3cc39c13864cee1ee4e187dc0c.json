{"ast":null,"code":"import { take } from 'rxjs/operators';\nimport { wrapIntoObservable } from '../utils';\nimport { lastValueFrom } from 'rxjs';\n/**\n * @param {Injector} injector\n * @param {ActivatedRoute} activatedRoute\n * @param {Router} router\n * @returns resolved data\n */\nexport function dataResolverFactory(injector, activatedRoute, router) {\n  /**\n   * @param {JssResolve<unknown> | Type<JssResolve<unknown>>} resolver\n   * @returns resolver instance\n   */\n  function getResolverInstance(resolver) {\n    return 'resolve' in resolver ? resolver : injector.get(resolver);\n  }\n  /**\n   * @param {ComponentFactoryResult} factory\n   * @returns {Array<[string, JssResolve<unknown>]>} resolver instances\n   */\n  function collectResolverInstances(factory) {\n    if (factory.resolve) {\n      const resolve = factory.resolve;\n      return Object.keys(factory.resolve).map(key => [key, getResolverInstance(resolve[key])]);\n    }\n    return [];\n  }\n  /**\n   * @param {JssResolve<unknown>} resolver\n   * @param {ComponentFactoryResult} factory\n   * @returns data\n   */\n  function _resolveData(resolver, factory) {\n    const data = resolver.resolve({\n      activatedRoute: activatedRoute.snapshot,\n      routerState: router.routerState.snapshot,\n      rendering: factory.componentDefinition\n    });\n    const data$ = wrapIntoObservable(data);\n    return lastValueFrom(data$.pipe(take(1)));\n  }\n  return function resolveData(factories) {\n    return Promise.all(factories.map(factory => {\n      const resolvers = collectResolverInstances(factory);\n      const pendingData = resolvers.map(([key, resolver]) => _resolveData(resolver, factory).then(data => [key, data]));\n      return Promise.all(pendingData).then(allData => allData.reduce((acc, [key, data]) => {\n        acc[key] = data;\n        return acc;\n      }, {})).then(data => ({\n        factory,\n        data\n      }));\n    }));\n  };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1yZXNvbHZlci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL2RhdGEtcmVzb2x2ZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckM7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLFFBQWtCLEVBQ2xCLGNBQThCLEVBQzlCLE1BQWM7SUFFZDs7O09BR0c7SUFDSCxTQUFTLG1CQUFtQixDQUFDLFFBQXlEO1FBQ3BGLE9BQU8sU0FBUyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSCxTQUFTLHdCQUF3QixDQUMvQixPQUErQjtRQUUvQixJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNwQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ2hDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFpQyxFQUFFLENBQUM7Z0JBQzlFLEdBQUc7Z0JBQ0gsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2xDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxZQUFZLENBQUMsUUFBNkIsRUFBRSxPQUErQjtRQUNsRixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQzVCLGNBQWMsRUFBRSxjQUFjLENBQUMsUUFBUTtZQUN2QyxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRO1lBQ3hDLFNBQVMsRUFBRSxPQUFPLENBQUMsbUJBQXlDO1NBQzdELENBQUMsQ0FBQztRQUNILE1BQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsT0FBTyxTQUFTLFdBQVcsQ0FBQyxTQUFtQztRQUM3RCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQ2hCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUN4QixNQUFNLFNBQVMsR0FBRyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUNwRCxZQUFZLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBaUIsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQzNFLENBQUM7WUFFRixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO2lCQUM1QixJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNoQixPQUFPLENBQUMsTUFBTSxDQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUN2RCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixPQUFPLEdBQUcsQ0FBQztZQUNiLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDUDtpQkFDQSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IENvbXBvbmVudFJlbmRlcmluZyB9IGZyb20gJ0BzaXRlY29yZS1qc3Mvc2l0ZWNvcmUtanNzL2xheW91dCc7XHJcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXN1bHQgfSBmcm9tICcuL2pzcy1jb21wb25lbnQtZmFjdG9yeS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgd3JhcEludG9PYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBKc3NSZXNvbHZlIH0gZnJvbSAnLi9wbGFjZWhvbGRlci50b2tlbic7XHJcbmltcG9ydCB7IGxhc3RWYWx1ZUZyb20gfSBmcm9tICdyeGpzJztcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge0luamVjdG9yfSBpbmplY3RvclxyXG4gKiBAcGFyYW0ge0FjdGl2YXRlZFJvdXRlfSBhY3RpdmF0ZWRSb3V0ZVxyXG4gKiBAcGFyYW0ge1JvdXRlcn0gcm91dGVyXHJcbiAqIEByZXR1cm5zIHJlc29sdmVkIGRhdGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRhUmVzb2x2ZXJGYWN0b3J5KFxyXG4gIGluamVjdG9yOiBJbmplY3RvcixcclxuICBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXHJcbiAgcm91dGVyOiBSb3V0ZXJcclxuKSB7XHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtKc3NSZXNvbHZlPHVua25vd24+IHwgVHlwZTxKc3NSZXNvbHZlPHVua25vd24+Pn0gcmVzb2x2ZXJcclxuICAgKiBAcmV0dXJucyByZXNvbHZlciBpbnN0YW5jZVxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGdldFJlc29sdmVySW5zdGFuY2UocmVzb2x2ZXI6IEpzc1Jlc29sdmU8dW5rbm93bj4gfCBUeXBlPEpzc1Jlc29sdmU8dW5rbm93bj4+KSB7XHJcbiAgICByZXR1cm4gJ3Jlc29sdmUnIGluIHJlc29sdmVyID8gcmVzb2x2ZXIgOiBpbmplY3Rvci5nZXQocmVzb2x2ZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtDb21wb25lbnRGYWN0b3J5UmVzdWx0fSBmYWN0b3J5XHJcbiAgICogQHJldHVybnMge0FycmF5PFtzdHJpbmcsIEpzc1Jlc29sdmU8dW5rbm93bj5dPn0gcmVzb2x2ZXIgaW5zdGFuY2VzXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gY29sbGVjdFJlc29sdmVySW5zdGFuY2VzKFxyXG4gICAgZmFjdG9yeTogQ29tcG9uZW50RmFjdG9yeVJlc3VsdFxyXG4gICk6IEFycmF5PFtzdHJpbmcsIEpzc1Jlc29sdmU8dW5rbm93bj5dPiB7XHJcbiAgICBpZiAoZmFjdG9yeS5yZXNvbHZlKSB7XHJcbiAgICAgIGNvbnN0IHJlc29sdmUgPSBmYWN0b3J5LnJlc29sdmU7XHJcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhmYWN0b3J5LnJlc29sdmUpLm1hcCgoa2V5KTogW3N0cmluZywgSnNzUmVzb2x2ZTx1bmtub3duPl0gPT4gW1xyXG4gICAgICAgIGtleSxcclxuICAgICAgICBnZXRSZXNvbHZlckluc3RhbmNlKHJlc29sdmVba2V5XSksXHJcbiAgICAgIF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7SnNzUmVzb2x2ZTx1bmtub3duPn0gcmVzb2x2ZXJcclxuICAgKiBAcGFyYW0ge0NvbXBvbmVudEZhY3RvcnlSZXN1bHR9IGZhY3RvcnlcclxuICAgKiBAcmV0dXJucyBkYXRhXHJcbiAgICovXHJcbiAgZnVuY3Rpb24gX3Jlc29sdmVEYXRhKHJlc29sdmVyOiBKc3NSZXNvbHZlPHVua25vd24+LCBmYWN0b3J5OiBDb21wb25lbnRGYWN0b3J5UmVzdWx0KSB7XHJcbiAgICBjb25zdCBkYXRhID0gcmVzb2x2ZXIucmVzb2x2ZSh7XHJcbiAgICAgIGFjdGl2YXRlZFJvdXRlOiBhY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdCxcclxuICAgICAgcm91dGVyU3RhdGU6IHJvdXRlci5yb3V0ZXJTdGF0ZS5zbmFwc2hvdCxcclxuICAgICAgcmVuZGVyaW5nOiBmYWN0b3J5LmNvbXBvbmVudERlZmluaXRpb24gYXMgQ29tcG9uZW50UmVuZGVyaW5nLFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBkYXRhJCA9IHdyYXBJbnRvT2JzZXJ2YWJsZShkYXRhKTtcclxuXHJcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShkYXRhJC5waXBlKHRha2UoMSkpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiByZXNvbHZlRGF0YShmYWN0b3JpZXM6IENvbXBvbmVudEZhY3RvcnlSZXN1bHRbXSkge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKFxyXG4gICAgICBmYWN0b3JpZXMubWFwKChmYWN0b3J5KSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZXJzID0gY29sbGVjdFJlc29sdmVySW5zdGFuY2VzKGZhY3RvcnkpO1xyXG4gICAgICAgIGNvbnN0IHBlbmRpbmdEYXRhID0gcmVzb2x2ZXJzLm1hcCgoW2tleSwgcmVzb2x2ZXJdKSA9PlxyXG4gICAgICAgICAgX3Jlc29sdmVEYXRhKHJlc29sdmVyLCBmYWN0b3J5KS50aGVuKChkYXRhKTogW3N0cmluZywgYW55XSA9PiBba2V5LCBkYXRhXSlcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocGVuZGluZ0RhdGEpXHJcbiAgICAgICAgICAudGhlbigoYWxsRGF0YSkgPT5cclxuICAgICAgICAgICAgYWxsRGF0YS5yZWR1Y2U8UmVjb3JkPHN0cmluZywgYW55Pj4oKGFjYywgW2tleSwgZGF0YV0pID0+IHtcclxuICAgICAgICAgICAgICBhY2Nba2V5XSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGFjYztcclxuICAgICAgICAgICAgfSwge30pXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICAudGhlbigoZGF0YSkgPT4gKHsgZmFjdG9yeSwgZGF0YSB9KSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH07XHJcbn1cclxuIl19","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}