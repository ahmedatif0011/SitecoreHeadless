{"ast":null,"code":"import { Directive, Input } from '@angular/core';\nimport { BaseFieldDirective } from './base-field.directive';\nimport { DefaultEmptyFieldEditingComponent } from './default-empty-text-field-editing-placeholder.component';\nimport { MetadataKind } from '@sitecore-jss/sitecore-jss/editing';\nimport * as i0 from \"@angular/core\";\nexport let LinkDirective = /*#__PURE__*/(() => {\n  class LinkDirective extends BaseFieldDirective {\n    templateRef;\n    renderer;\n    elementRef;\n    editable = true;\n    attrs = {};\n    field;\n    /**\n     * Custom template to render in Pages in Metadata edit mode if field value is empty\n     */\n    emptyFieldEditingTemplate;\n    /**\n     * Default component to render in Pages in Metadata edit mode if field value is empty and emptyFieldEditingTemplate is not provided\n     */\n    defaultFieldEditingComponent;\n    inlineRef = null;\n    constructor(viewContainer, templateRef, renderer, elementRef) {\n      super(viewContainer);\n      this.templateRef = templateRef;\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.defaultFieldEditingComponent = DefaultEmptyFieldEditingComponent;\n    }\n    ngOnChanges(changes) {\n      if (changes.field || changes.editable || changes.attrs) {\n        this.viewContainer.clear();\n        if (this.inlineRef) {\n          this.inlineRef.remove();\n          this.inlineRef = null;\n        }\n        this.updateView();\n      }\n    }\n    renderTemplate(props, linkText) {\n      const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n      viewRef.rootNodes.forEach(node => {\n        Object.entries(props).forEach(([key, propValue]) => {\n          this.updateAttribute(node, key, propValue);\n        });\n        if (node.childNodes && node.childNodes.length === 0 && linkText) {\n          node.textContent = linkText;\n        }\n      });\n    }\n    updateAttribute(node, key, propValue) {\n      if (typeof propValue !== 'string' || !propValue || propValue === '') {\n        return;\n      }\n      if (key === 'href') {\n        const isInvalidLink = !propValue || /^https?:\\/\\/$/.test(propValue);\n        if (isInvalidLink) {\n          if (!node.href) {\n            return;\n          }\n          propValue = node.href;\n        }\n        this.renderer.setAttribute(node, key, propValue);\n      } else if (key === 'class' && node.className !== '') {\n        this.renderer.setAttribute(node, key, `${node.className} ${propValue}`);\n      } else {\n        this.renderer.setAttribute(node, key, propValue);\n      }\n    }\n    /**\n     * Determines if directive should render the field as is\n     * Returns true if we are in edit mode 'chromes' (field.editable is present) or field is not empty\n     * or link field text is present and we are not in edit mode 'metadata'\n     * The right side of the expression was added to preserve existing functionality\n     */\n    shouldRender() {\n      return super.shouldRender() || !!((this.field?.text || this.field?.value?.text) && !this.field?.metadata);\n    }\n    updateView() {\n      const field = this.field;\n      if (this.editable && field && field.editableFirstPart && field.editableLastPart) {\n        this.renderInlineWrapper(field.editableFirstPart, field.editableLastPart);\n      } else {\n        if (!this.shouldRender()) {\n          super.renderEmpty();\n          return;\n        }\n        const props = field.href ? field : field.value;\n        const linkText = field.text || field.value?.text || field.href || field.value?.href;\n        const anchor = props?.anchor ? `#${props.anchor}` : '';\n        const href = `${props?.href}${anchor}`;\n        const mergedAttrs = {\n          ...props,\n          ...this.attrs,\n          href\n        };\n        delete mergedAttrs.anchor;\n        this.renderMetadata(MetadataKind.Open);\n        this.renderTemplate(mergedAttrs, linkText);\n        this.renderMetadata(MetadataKind.Close);\n      }\n    }\n    renderInlineWrapper(editableFirstPart, editableLastPart) {\n      const span = this.renderer.createElement('span');\n      span.className = 'sc-link-wrapper';\n      span.innerHTML = editableFirstPart + editableLastPart;\n      // assign attributes from template to inline wrapper\n      const attrs = {\n        ...this.getElementAttrs(),\n        ...this.attrs\n      };\n      Object.entries(attrs).forEach(([key, attrValue]) => this.updateAttribute(span, key, attrValue));\n      this.viewContainer.createEmbeddedView(this.templateRef);\n      const parentNode = this.renderer.parentNode(this.elementRef.nativeElement);\n      this.renderer.insertBefore(parentNode, span, this.elementRef.nativeElement);\n      this.inlineRef = span;\n    }\n    getElementAttrs() {\n      const view = this.templateRef.createEmbeddedView(null);\n      const element = view.rootNodes[0];\n      if (!element) {\n        view.destroy();\n        return {};\n      }\n      const attrs = {};\n      for (let i = 0; i < element.attributes.length; i++) {\n        const attr = element.attributes.item(i);\n        if (attr) {\n          attrs[attr.name] = attr.value;\n        }\n      }\n      view.destroy();\n      return attrs;\n    }\n    static ɵfac = function LinkDirective_Factory(t) {\n      return new (t || LinkDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: LinkDirective,\n      selectors: [[\"\", \"scLink\", \"\"]],\n      inputs: {\n        editable: [i0.ɵɵInputFlags.None, \"scLinkEditable\", \"editable\"],\n        attrs: [i0.ɵɵInputFlags.None, \"scLinkAttrs\", \"attrs\"],\n        field: [i0.ɵɵInputFlags.None, \"scLink\", \"field\"],\n        emptyFieldEditingTemplate: [i0.ɵɵInputFlags.None, \"scLinkEmptyFieldEditingTemplate\", \"emptyFieldEditingTemplate\"]\n      },\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return LinkDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}