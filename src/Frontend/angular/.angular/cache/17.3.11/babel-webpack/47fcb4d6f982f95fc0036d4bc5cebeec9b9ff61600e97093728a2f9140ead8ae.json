{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CdpHelper = exports.VARIANT_PREFIX = exports.DEFAULT_VARIANT = void 0;\nexports.getPersonalizedRewrite = getPersonalizedRewrite;\nexports.getPersonalizedRewriteData = getPersonalizedRewriteData;\nexports.getGroomedVariantIds = getGroomedVariantIds;\nexports.normalizePersonalizedRewrite = normalizePersonalizedRewrite;\nexports.DEFAULT_VARIANT = '_default';\nexports.VARIANT_PREFIX = '_variantId_';\n/**\n * Get a personalized rewrite path for given pathname\n * @param {string} pathname the pathname\n * @param {string[]} variantIds the variantIds to include in the rewrite\n * @returns {string} the rewrite path\n */\nfunction getPersonalizedRewrite(pathname, variantIds) {\n  const path = pathname.startsWith('/') ? pathname : '/' + pathname;\n  return `${variantIds.map(variantId => `/${exports.VARIANT_PREFIX}${variantId}`).join('')}${path}`;\n}\n/**\n * Get personalize data from the rewrite path\n * @param {string} pathname the pathname\n * @returns {PersonalizedRewriteData} the personalize data from the rewrite\n */\nfunction getPersonalizedRewriteData(pathname) {\n  const segments = pathname.split('/');\n  const variantIds = [];\n  segments.forEach(segment => {\n    const result = segment.match(`${exports.VARIANT_PREFIX}(.*$)`);\n    if (result) {\n      variantIds.push(result[1]);\n    }\n  });\n  return getGroomedVariantIds(variantIds);\n}\n/**\n * Parses a list of variantIds and divides into layout and component variants\n * @param {string[]} variantIds the list of variant IDs for a page\n * @returns {PersonalizedRewriteData} object with variant IDs sorted\n */\nfunction getGroomedVariantIds(variantIds) {\n  const data = {\n    variantId: exports.DEFAULT_VARIANT,\n    componentVariantIds: []\n  };\n  variantIds.forEach(variantId => {\n    var _a;\n    if (variantId.includes('_')) {\n      // Component-level personalization in format \"<ComponentID>_<VariantID>\"\n      // There can be multiple\n      (_a = data.componentVariantIds) === null || _a === void 0 ? void 0 : _a.push(variantId);\n    } else {\n      // Embedded (page-level) personalization in format \"<VariantID>\"\n      // There should be only one\n      data.variantId = variantId;\n    }\n  });\n  return data;\n}\n/**\n * Normalize a personalized rewrite path (remove personalize data)\n * @param {string} pathname the pathname\n * @returns {string} the pathname with personalize data removed\n */\nfunction normalizePersonalizedRewrite(pathname) {\n  if (!pathname.includes(exports.VARIANT_PREFIX)) {\n    return pathname;\n  }\n  let segments = pathname.split('/');\n  segments = segments.filter(segment => !segment.includes(exports.VARIANT_PREFIX));\n  const result = segments.join('/');\n  // return root path if all segments were personalize data\n  return result ? result : '/';\n}\n/**\n * Static utility class for Sitecore CDP\n */\nclass CdpHelper {\n  /**\n   * Gets the page variant id for CDP in the required format\n   * @param {string} pageId the page id\n   * @param {string} language the language\n   * @param {string} variantId the variant id\n   * @param {string} [scope] the scope value\n   * @returns {string} the formatted page variant id\n   */\n  static getPageVariantId(pageId, language, variantId, scope) {\n    const formattedPageId = pageId.replace(/[{}-]/g, '');\n    const formattedLanguage = language.replace('-', '_');\n    const scopeId = scope ? `${this.normalizeScope(scope)}_` : '';\n    let formattedVariantId = variantId;\n    if (!variantId || variantId === exports.DEFAULT_VARIANT) {\n      formattedVariantId = 'default';\n    }\n    return `${scopeId}${formattedPageId}_${formattedLanguage}_${formattedVariantId}`.toLowerCase();\n  }\n  /**\n   * Gets the friendly id for (page-level) Embedded Personalization in the required format `embedded_[<scope>_]<id>_<lang>`\n   * @param {string} pageId the page id\n   * @param {string} language the language\n   * @param {string} [scope] the scope value\n   * @returns {string} the friendly id\n   */\n  static getPageFriendlyId(pageId, language, scope) {\n    const formattedPageId = pageId.replace(/[{}-]/g, '');\n    const formattedLanguage = language.replace('-', '_');\n    const scopeId = scope ? `${this.normalizeScope(scope)}_` : '';\n    return `embedded_${scopeId}${formattedPageId}_${formattedLanguage}`.toLowerCase();\n  }\n  /**\n   * Gets the friendly id for Component A/B Testing in the required format `component_[<scope>_]<pageId>_<componentId>_<language>*`\n   * @param {string} pageId the page id\n   * @param {string} componentId the component id\n   * @param {string} language the language\n   * @param {string} [scope] the scope value\n   * @returns {string} the friendly id\n   */\n  static getComponentFriendlyId(pageId, componentId, language, scope) {\n    const formattedPageId = pageId.replace(/[{}-]/g, '');\n    const formattedComponentId = componentId.replace(/[{}-]/g, '');\n    const formattedLanguage = language.replace('-', '_');\n    const scopeId = scope ? `${this.normalizeScope(scope)}_` : '';\n    return `component_${scopeId}${formattedPageId}_${formattedComponentId}_${formattedLanguage}*`.toLowerCase();\n  }\n  /**\n   * Normalizes the scope from the given string value\n   * Removes all non-alphanumeric characters\n   * @param {string} [scope] the scope value\n   * @returns {string} normalized scope value\n   */\n  static normalizeScope(scope) {\n    return (scope === null || scope === void 0 ? void 0 : scope.replace(/[^a-zA-Z0-9]+/g, '')) || '';\n  }\n}\nexports.CdpHelper = CdpHelper;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}