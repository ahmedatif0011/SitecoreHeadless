{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.\nimport { ErrorMessages, LIBRARY_VERSION } from '../consts';\nimport { ErrorMessages as UtilsErrorMessages, fetchWithTimeout } from '@sitecore-cloudsdk/utils';\nimport { constructGetBrowserIdUrl } from './construct-get-browser-id-url';\n/**\n * Gets the browser ID and Client Key from Sitecore Edge Proxy\n * @param sitecoreEdgeUrl - The baseURL for the Edge Proxy API.\n * @param sitecoreEdgeContextId - The sitecoreContextId param for the edge Proxy API.\n * @param timeout - The timeout for the call to proxy\n * @returns the browser ID\n */\nexport function fetchBrowserIdFromEdgeProxy(_x, _x2, _x3) {\n  return _fetchBrowserIdFromEdgeProxy.apply(this, arguments);\n}\nfunction _fetchBrowserIdFromEdgeProxy() {\n  _fetchBrowserIdFromEdgeProxy = _asyncToGenerator(function* (sitecoreEdgeUrl, sitecoreEdgeContextId, timeout) {\n    const fetchOptions = {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      headers: {\n        'X-Library-Version': LIBRARY_VERSION\n      }\n    };\n    const url = constructGetBrowserIdUrl(sitecoreEdgeUrl, sitecoreEdgeContextId);\n    let payload;\n    if (timeout !== undefined) payload = yield fetchWithTimeout(url, timeout, fetchOptions).then(response => {\n      return response && response.json() || null;\n    }).catch(err => {\n      if (err.message === UtilsErrorMessages.IV_0006 || err.message === UtilsErrorMessages.IE_0002) throw new Error(err.message);\n      return null;\n    });else payload = yield fetch(url, fetchOptions).then(res => res.json()).catch(() => undefined);\n    if (!payload?.ref) throw new Error(ErrorMessages.IE_0003);\n    const {\n      ref: browserId,\n      customer_ref: guestId\n    } = payload;\n    return {\n      browserId,\n      guestId\n    };\n  });\n  return _fetchBrowserIdFromEdgeProxy.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}