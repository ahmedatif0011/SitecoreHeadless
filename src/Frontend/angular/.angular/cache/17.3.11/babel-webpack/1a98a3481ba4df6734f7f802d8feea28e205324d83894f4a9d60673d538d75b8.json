{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLLayoutService = exports.GRAPHQL_LAYOUT_QUERY_NAME = void 0;\nconst layout_service_1 = require(\"./layout-service\");\nconst debug_1 = __importDefault(require(\"../debug\"));\nexports.GRAPHQL_LAYOUT_QUERY_NAME = 'JssLayoutQuery';\n/**\n * Service that fetch layout data using Sitecore's GraphQL API.\n * @augments LayoutServiceBase\n * @mixes GraphQLRequestClient\n */\nclass GraphQLLayoutService extends layout_service_1.LayoutServiceBase {\n  /**\n   * Fetch layout data using the Sitecore GraphQL endpoint.\n   * @param {GraphQLLayoutServiceConfig} serviceConfig configuration\n   */\n  constructor(serviceConfig) {\n    super();\n    this.serviceConfig = serviceConfig;\n    this.graphQLClient = this.getGraphQLClient();\n  }\n  /**\n   * Fetch layout data for an item.\n   * @param {string} itemPath item path to fetch layout data for.\n   * @param {string} [language] the language to fetch layout data for.\n   * @returns {Promise<LayoutServiceData>} layout service data\n   */\n  fetchLayoutData(itemPath, language) {\n    return __awaiter(this, void 0, void 0, function* () {\n      var _a, _b;\n      const query = this.getLayoutQuery(itemPath, language);\n      debug_1.default.layout('fetching layout data for %s %s %s', itemPath, language, this.serviceConfig.siteName);\n      const data = yield this.graphQLClient.request(query);\n      // If `rendered` is empty -> not found\n      return ((_b = (_a = data === null || data === void 0 ? void 0 : data.layout) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.rendered) || {\n        sitecore: {\n          context: {\n            pageEditing: false,\n            language\n          },\n          route: null\n        }\n      };\n    });\n  }\n  /**\n   * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default\n   * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you\n   * want to use something else.\n   * @returns {GraphQLClient} implementation\n   */\n  getGraphQLClient() {\n    if (!this.serviceConfig.clientFactory) {\n      throw new Error('clientFactory needs to be provided when initializing GraphQL client.');\n    }\n    return this.serviceConfig.clientFactory({\n      debugger: debug_1.default.layout,\n      retries: this.serviceConfig.retries,\n      retryStrategy: this.serviceConfig.retryStrategy\n    });\n  }\n  /**\n   * Returns GraphQL Layout query\n   * @param {string} itemPath page route\n   * @param {string} [language] language\n   * @returns {string} GraphQL query\n   */\n  getLayoutQuery(itemPath, language) {\n    const languageVariable = language ? `, language:\"${language}\"` : '';\n    const layoutQuery = this.serviceConfig.formatLayoutQuery ? this.serviceConfig.formatLayoutQuery(this.serviceConfig.siteName, itemPath, language) : `layout(site:\"${this.serviceConfig.siteName}\", routePath:\"${itemPath}\"${languageVariable})`;\n    return `query ${exports.GRAPHQL_LAYOUT_QUERY_NAME} {\n      ${layoutQuery}{\n        item {\n          rendered\n        }\n      }\n    }`;\n  }\n}\nexports.GraphQLLayoutService = GraphQLLayoutService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}