{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport axios from 'axios';\nimport debuggers from './debug';\n/**\n * Determines whether error is AxiosError\n * @param {unknown} error\n */\nconst isAxiosError = error => {\n  return error.isAxiosError !== undefined;\n};\n/**\n *  AxisoDataFetcher is a wrapper for axios library.\n */\nexport class AxiosDataFetcher {\n  /**\n   * @param {AxiosDataFetcherConfig} dataFetcherConfig Axios data fetcher configuration.\n   * Note `withCredentials` is set to `true` by default in order for Sitecore cookies to\n   * be included in CORS requests (which is necessary for analytics and such).\n   */\n  constructor(dataFetcherConfig = {}) {\n    const {\n        onReq,\n        onRes,\n        onReqError,\n        onResError,\n        debugger: debuggerOverride\n      } = dataFetcherConfig,\n      axiosConfig = __rest(dataFetcherConfig, [\"onReq\", \"onRes\", \"onReqError\", \"onResError\", \"debugger\"]);\n    if (axiosConfig.withCredentials === undefined) {\n      axiosConfig.withCredentials = true;\n    }\n    this.instance = axios.create(axiosConfig);\n    const debug = debuggerOverride || debuggers.http;\n    // Note Axios response interceptors are applied in registered order;\n    // however, request interceptors are REVERSED (https://github.com/axios/axios/issues/1663).\n    // Hence, we're adding our request debug logging first (since we want that performed after any onReq)\n    // and our response debug logging second (since we want that performed after any onRes).\n    if (debug.enabled) {\n      this.instance.interceptors.request.use(config => {\n        debug('request: %o', config);\n        // passing timestamp for debug logging\n        config.headers.timestamp = Date.now();\n        return config;\n      }, error => {\n        debug('request error: %o', isAxiosError(error) ? error.toJSON() : error);\n        return Promise.reject(error);\n      });\n    }\n    if (onReq) {\n      this.instance.interceptors.request.use(onReq, onReqError);\n    }\n    if (onRes) {\n      this.instance.interceptors.response.use(onRes, onResError);\n    }\n    if (debug.enabled) {\n      this.instance.interceptors.response.use(response => {\n        // Note we're removing redundant properties (already part of request log above) to trim down log entry\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n            request,\n            config\n          } = response,\n          rest = __rest(response, [\"request\", \"config\"]);\n        const duration = Date.now() - config.headers.timestamp;\n        delete response.config.headers.timestamp;\n        debug('response in %dms: %o', duration, rest);\n        return response;\n      }, error => {\n        debug('response error: %o', isAxiosError(error) ? error.toJSON() : error);\n        return Promise.reject(error);\n      });\n    }\n  }\n  /**\n   * Implements a data fetcher. @see HttpDataFetcher<T> type for implementation details/notes.\n   * @param {string} url The URL to request; may include query string\n   * @param {unknown} [data] Optional data to POST with the request.\n   * @returns {Promise<AxiosResponse<T>>} response\n   */\n  fetch(url, data) {\n    return this.instance.request({\n      url,\n      method: data ? 'POST' : 'GET',\n      data\n    });\n  }\n  /**\n   * Perform a GET request\n   * @param {string} url The URL to request; may include query string\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse<T>>} response\n   */\n  get(url, config) {\n    return this.instance.get(url, config);\n  }\n  /**\n   * Perform a HEAD request\n   * @param {string} url The URL to request; may include query string\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n  head(url, config) {\n    return this.instance.head(url, config);\n  }\n  /**\n   * Perform a POST request\n   * @param {string} url The URL to request; may include query string\n   * @param {unknown} [data] Data to POST with the request.\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n  post(url, data, config) {\n    return this.instance.post(url, data, config);\n  }\n  /**\n   * Perform a PUT request\n   * @param {string} url The URL to request; may include query string\n   * @param {unknown} [data] Data to PUT with the request.\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n  put(url, data, config) {\n    return this.instance.put(url, data, config);\n  }\n  /**\n   * Perform a DELETE request\n   * @param {string} url The URL to request; may include query string\n   * @param {AxiosRequestConfig} [config] Axios config\n   * @returns {Promise<AxiosResponse>} response\n   */\n  delete(url, config) {\n    return this.instance.delete(url, config);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}