{"ast":null,"code":"import { UrlTree } from '@angular/router';\nimport { lastValueFrom, of } from 'rxjs';\nimport { mergeMap, take } from 'rxjs/operators';\nimport { wrapIntoObservable } from '../utils';\nimport { JssCanActivateRedirectError } from './jss-can-activate-error';\n/**\n * @param {boolean | string | string[] | UrlTree} value\n * @returns instance of value\n */\nfunction isRedirectValue(value) {\n  return value instanceof UrlTree || typeof value === 'string' || Array.isArray(value);\n}\n/**\n * Resolves components based on provided guards\n * @param {Injector} injector\n * @param {ActivatedRoute} activatedRoute\n * @param {Router} router\n * @returns {(factories: ComponentFactoryResult[]) => Promise<ComponentFactoryResult[]>} factory\n */\nexport function guardResolverFactory(injector, activatedRoute, router) {\n  /**\n   * @param {JssCanActivate | Type<JssCanActivate> | JssCanActivateFn} guard\n   * @returns resolved guard\n   */\n  function getGuardInstance(guard) {\n    if ('canActivate' in guard) {\n      return guard;\n    }\n    try {\n      // Class is provided\n      return injector.get(guard);\n    } catch {\n      // Function is provided\n      return guard;\n    }\n  }\n  /**\n   * @param {ComponentFactoryResult} factory\n   * @returns {(JssCanActivate | JssCanActivateFn)[]} guard instances\n   */\n  function collectGuardInstances(factory) {\n    if (factory.canActivate) {\n      return Array.isArray(factory.canActivate) ? factory.canActivate.map(getGuardInstance) : [getGuardInstance(factory.canActivate)];\n    }\n    return [];\n  }\n  /**\n   *\n   * @param {JssCanActivate | JssCanActivateFn} guard\n   * @param {ComponentFactoryResult} factory\n   * @returns canActivate\n   */\n  function resolveGuard(guard, factory) {\n    const canActivate = 'canActivate' in guard ? guard.canActivate.bind(guard) : guard;\n    const guardValue = canActivate({\n      activatedRoute: activatedRoute.snapshot,\n      routerState: router.routerState.snapshot,\n      rendering: factory.componentDefinition\n    });\n    const canActivate$ = wrapIntoObservable(guardValue);\n    return lastValueFrom(canActivate$.pipe(take(1), mergeMap(value => {\n      if (isRedirectValue(value)) {\n        throw new JssCanActivateRedirectError(`Value: '${value.toString()}' is a redirect value`, value);\n      } else {\n        return of(value);\n      }\n    })));\n  }\n  return function resolveGuards(factories) {\n    const resolved = factories.map(factory => {\n      const guards = collectGuardInstances(factory);\n      const pending = guards.map(guard => resolveGuard(guard, factory));\n      return Promise.all(pending).then(canActive => canActive.every(v => v)).then(canActivate => ({\n        factory,\n        canActivate\n      }));\n    });\n    return Promise.all(resolved).then(mapped => mapped.filter(m => m.canActivate).map(m => m.factory));\n  };\n}\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}