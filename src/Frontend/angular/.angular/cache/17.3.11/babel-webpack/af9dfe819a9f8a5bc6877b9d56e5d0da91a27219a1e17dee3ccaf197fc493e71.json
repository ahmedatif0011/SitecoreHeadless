{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.personalizeLayout = personalizeLayout;\nexports.personalizePlaceholder = personalizePlaceholder;\nexports.personalizeComponent = personalizeComponent;\nconst constants_1 = require(\"../constants\");\nconst models_1 = require(\"./../layout/models\");\nconst transformToHiddenRenderingVariant = component => Object.assign(Object.assign({}, component), {\n  componentName: constants_1.HIDDEN_RENDERING_NAME,\n  experiences: {}\n});\n/**\n * Apply personalization to layout data. This will recursively go through all placeholders/components, check experiences nodes and replace default with object from specific experience.\n * @param {LayoutServiceData} layout Layout data\n * @param {string} variantId variant id\n * @param {string[]} [componentVariantIds] component variant ids\n */\nfunction personalizeLayout(layout, variantId, componentVariantIds) {\n  var _a;\n  // Add (page-level) variantId to Sitecore context so that it is accessible here\n  layout.sitecore.context.variantId = variantId;\n  const placeholders = ((_a = layout.sitecore.route) === null || _a === void 0 ? void 0 : _a.placeholders) || {};\n  if (Object.keys(placeholders).length === 0) {\n    return undefined;\n  }\n  const metadataEditing = layout.sitecore.context.pageEditing && layout.sitecore.context.editMode === models_1.EditMode.Metadata;\n  if (placeholders) {\n    Object.keys(placeholders).forEach(placeholder => {\n      placeholders[placeholder] = personalizePlaceholder(placeholders[placeholder], [variantId, ...(componentVariantIds || [])], metadataEditing);\n    });\n  }\n  return placeholders;\n}\n/**\n * @param {Array} components components within placeholder\n * @param {string[]} variantIds variant ids\n * @param {boolean} metadataEditing indicates if page is rendered in metadata edit mode\n * @returns {Array<ComponentRendering | HtmlElementRendering>} components with personalization applied\n */\nfunction personalizePlaceholder(components, variantIds, metadataEditing) {\n  return components.map(component => {\n    const rendering = component;\n    if (rendering.experiences !== undefined) {\n      return personalizeComponent(rendering, variantIds, metadataEditing);\n    } else if (rendering.placeholders) {\n      const placeholders = rendering.placeholders;\n      Object.keys(placeholders).forEach(placeholder => {\n        placeholders[placeholder] = personalizePlaceholder(placeholders[placeholder], variantIds, metadataEditing);\n      });\n    }\n    return component;\n  }).filter(Boolean);\n}\n/**\n * @param {ComponentRenderingWithExperiences} component component with experiences\n * @param {string[]} variantIds variant ids\n * @param {boolean} metadataEditing indicates if page is rendered in metadata edit mode\n * @returns {ComponentRendering | null} component with personalization applied or null if hidden\n */\nfunction personalizeComponent(component, variantIds, metadataEditing) {\n  // Check if we have a page/component experience matching any of the variants (there should be at most 1)\n  const match = Object.keys(component.experiences).find(variantId => variantIds.includes(variantId));\n  const variant = match && component.experiences[match];\n  // variant and componentName can be undefined or null\n  if (!variant && !component.componentName) {\n    // DEFAULT IS HIDDEN\n    if (metadataEditing) {\n      component = transformToHiddenRenderingVariant(component);\n    } else {\n      return null;\n    }\n  } else if (variant && variant.componentName === null && variant.dataSource === null) {\n    // VARIANT IS HIDDEN\n    if (metadataEditing) {\n      component = transformToHiddenRenderingVariant(component);\n    } else {\n      return null;\n    }\n  } else if (variant) {\n    component = variant;\n  }\n  // remove unused experiences from layout data\n  if (component.experiences) {\n    component.experiences = {};\n  }\n  if (!component.placeholders) return component;\n  Object.keys(component === null || component === void 0 ? void 0 : component.placeholders).forEach(placeholder => {\n    if (component.placeholders) {\n      component.placeholders[placeholder] = personalizePlaceholder(component.placeholders[placeholder], variantIds);\n    }\n  });\n  return component;\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}