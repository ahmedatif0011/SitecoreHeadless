{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/* eslint-disable @angular-eslint/no-conflicting-lifecycle */\nimport { isPlatformServer } from '@angular/common';\nimport { Component, ContentChild, EventEmitter, Inject, Input, Output, PLATFORM_ID, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';\nimport { UrlTree } from '@angular/router';\nimport { EditMode } from '@sitecore-jss/sitecore-jss/layout';\nimport { Observable } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { JssCanActivateRedirectError } from '../services/jss-can-activate-error';\nimport { DATA_RESOLVER, GUARD_RESOLVER, PLACEHOLDER_HIDDEN_RENDERING_COMPONENT, PLACEHOLDER_MISSING_COMPONENT_COMPONENT } from '../services/placeholder.token';\nimport { constants } from '@sitecore-jss/sitecore-jss';\nimport { isDynamicPlaceholder, getDynamicPlaceholderPattern } from '@sitecore-jss/sitecore-jss/layout';\nimport { PlaceholderLoadingDirective } from './placeholder-loading.directive';\nimport { RenderEachDirective } from './render-each.directive';\nimport { RenderEmptyDirective } from './render-empty.directive';\nimport { isRawRendering } from './rendering';\nimport { MetadataKind, DEFAULT_PLACEHOLDER_UID } from '@sitecore-jss/sitecore-jss/editing';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/jss-component-factory.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/jss-state.service\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"view\"];\nconst _c1 = [\"metadataCodeBlock\"];\nconst _c2 = () => ({\n  kind: \"open\",\n  chromeType: \"placeholder\"\n});\nconst _c3 = () => ({\n  kind: \"close\",\n  chromeType: \"placeholder\"\n});\nfunction PlaceholderComponent_0_ng_template_0_Template(rf, ctx) {}\nfunction PlaceholderComponent_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, PlaceholderComponent_0_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.placeholderLoading == null ? null : ctx_r0.placeholderLoading.templateRef);\n  }\n}\nfunction PlaceholderComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"code\", 5);\n  }\n  if (rf & 2) {\n    const kind_r2 = ctx.kind;\n    const type_r3 = ctx.chromeType;\n    const renderingId_r4 = ctx.renderingId;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"kind\", kind_r2)(\"chrometype\", type_r3)(\"id\", ctx_r0.getCodeBlockId(kind_r2, renderingId_r4));\n  }\n}\nfunction PlaceholderComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction PlaceholderComponent_ng_template_4_Template(rf, ctx) {}\nfunction PlaceholderComponent_ng_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nexport let PlaceholderComponent = /*#__PURE__*/(() => {\n  class PlaceholderComponent {\n    differs;\n    componentFactory;\n    changeDetectorRef;\n    elementRef;\n    renderer;\n    router;\n    missingComponentComponent;\n    hiddenRenderingComponent;\n    guardResolver;\n    dataResolver;\n    platformId;\n    jssState;\n    name;\n    rendering;\n    renderings;\n    outputs;\n    clientOnly = false;\n    loaded = new EventEmitter();\n    failed = new EventEmitter();\n    renderEachTemplate;\n    renderEmptyTemplate;\n    placeholderLoading;\n    view;\n    metadataNode;\n    isLoading = true;\n    metadataMode;\n    chromeType;\n    _inputs;\n    _differ;\n    _componentInstances = [];\n    placeholderData;\n    destroyed = false;\n    parentStyleAttribute = '';\n    contextSubscription;\n    constructor(differs, componentFactory, changeDetectorRef, elementRef, renderer, router, missingComponentComponent, hiddenRenderingComponent, guardResolver, dataResolver, platformId, jssState) {\n      this.differs = differs;\n      this.componentFactory = componentFactory;\n      this.changeDetectorRef = changeDetectorRef;\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.router = router;\n      this.missingComponentComponent = missingComponentComponent;\n      this.hiddenRenderingComponent = hiddenRenderingComponent;\n      this.guardResolver = guardResolver;\n      this.dataResolver = dataResolver;\n      this.platformId = platformId;\n      this.jssState = jssState;\n      this.contextSubscription = this.jssState.state.subscribe(({\n        sitecore\n      }) => {\n        this.metadataMode = sitecore?.context.editMode === EditMode.Metadata;\n      });\n    }\n    set inputs(value) {\n      this._inputs = value;\n      if (!this._differ && value) {\n        this._differ = this.differs.find(value).create();\n      }\n    }\n    ngOnInit() {\n      this.chromeType = this.name ? 'placeholder' : 'rendering';\n      // just to ensure the element exists\n      const elem = this.elementRef.nativeElement;\n      if (elem) {\n        const attributes = elem.attributes;\n        for (let i = 0; i < attributes.length; i++) {\n          const attr = attributes.item(i);\n          if (attr && attr.name.indexOf('_ngcontent') !== -1) {\n            this.parentStyleAttribute = attr.name;\n          }\n        }\n      }\n      this.placeholderData = this.renderings || this.getPlaceholder() || [];\n    }\n    ngOnDestroy() {\n      this.destroyed = true;\n      this._componentInstances = [];\n      if (this.contextSubscription) {\n        this.contextSubscription.unsubscribe();\n      }\n    }\n    ngOnChanges(changes) {\n      this.chromeType = changes.name ? 'placeholder' : 'rendering';\n      if (changes.rendering || changes.renderings) {\n        this.placeholderData = this.renderings || this.getPlaceholder() || [];\n        this._render();\n      }\n    }\n    ngDoCheck() {\n      if (!this._differ || !this._inputs || this._componentInstances.length === 0) {\n        return;\n      }\n      const changes = this._differ.diff(this._inputs);\n      if (!changes) {\n        return;\n      }\n      const updates = {};\n      changes.forEachRemovedItem(change => updates[change.key] = null);\n      changes.forEachAddedItem(change => updates[change.key] = change.currentValue);\n      changes.forEachChangedItem(change => updates[change.key] = change.currentValue);\n      this._componentInstances.forEach(componentInstance => this._setComponentInputs(componentInstance, updates));\n    }\n    /**\n     * Gets id for Metadata code blocks, in specific format\n     * Metadata code blocks will wrap be added around placeholder content and each rendering component\n     * to allow for editing integration in Pages.\n     * @param {string} kind code block type (\"open\" or \"close\"). \"open\" is added before an element, and \"close\" added after one.\n     * @param {string?} renderingId rendering uid to apply as id to code block\n     * @returns {string} formatted id value for code HTML node\n     */\n    getCodeBlockId = (kind, renderingId) => {\n      if (this.rendering && kind === MetadataKind.Open) {\n        const placeholderName = this.name;\n        const id = renderingId || this.rendering?.uid;\n        if (!renderingId && placeholderName) {\n          let phId = '';\n          for (const placeholder of Object.keys(this.rendering.placeholders || [])) {\n            if (placeholderName === placeholder) {\n              phId = id ? `${placeholderName}_${id}` : `${placeholderName}_${DEFAULT_PLACEHOLDER_UID}`;\n              break;\n            }\n            // Check if the placeholder is a dynamic placeholder\n            if (isDynamicPlaceholder(placeholder)) {\n              const pattern = getDynamicPlaceholderPattern(placeholder);\n              // Check if the placeholder matches the dynamic placeholder pattern\n              if (pattern.test(placeholderName)) {\n                phId = id ? `${placeholder}_${id}` : `${placeholder}_${DEFAULT_PLACEHOLDER_UID}`;\n                break;\n              }\n            }\n          }\n          return phId;\n        } else {\n          return id;\n        }\n      }\n      return undefined;\n    };\n    /**\n     * Get renderings/components to be rendered for current placeholder name\n     * Can modify the inner placeholders collection to adjust to using SXA dynamic placeholders\n     * @returns {ComponentRendering<ComponentFields> | HtmlElementRendering[] | null} List of renderings to be rendered\n     */\n    getPlaceholder() {\n      let phName = this.name?.slice() || '';\n      /**\n       * Process (SXA) dynamic placeholders\n       * Find and replace the matching dynamic placeholder e.g 'nameOfContainer-{*}' with the requested e.g. 'nameOfContainer-1'.\n       * For Metadata EditMode, we need to keep the raw placeholder name in place.\n       */\n      this.rendering?.placeholders && Object.keys(this.rendering.placeholders).forEach(placeholder => {\n        const patternPlaceholder = isDynamicPlaceholder(placeholder) ? getDynamicPlaceholderPattern(placeholder) : null;\n        if (patternPlaceholder && patternPlaceholder.test(phName)) {\n          if (this.metadataMode) {\n            phName = placeholder;\n          } else {\n            this.rendering.placeholders[phName] = this.rendering.placeholders[placeholder];\n            delete this.rendering.placeholders[placeholder];\n          }\n        }\n      });\n      if (this.rendering && this.rendering.placeholders && Object.keys(this.rendering.placeholders).length > 0) {\n        return this.rendering.placeholders[phName];\n      }\n      return null;\n    }\n    _setComponentInputs(componentInstance, inputs) {\n      Object.entries(inputs).forEach(([input, inputValue]) => componentInstance[input] = inputValue);\n    }\n    _subscribeComponentOutputs(componentInstance, outputs) {\n      Object.keys(outputs).filter(output => componentInstance[output] && componentInstance[output] instanceof Observable).forEach(output => componentInstance[output].pipe(takeWhile(() => !this.destroyed)).subscribe(outputs[output]));\n    }\n    _render() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.clientOnly && isPlatformServer(_this.platformId)) {\n          return;\n        }\n        _this._componentInstances = [];\n        _this.view.clear();\n        if (!_this.rendering && !_this.renderings) {\n          return;\n        }\n        if (!_this.name && !_this.renderings) {\n          console.warn('Placeholder name was not specified, and explicit renderings array was not passed. Placeholder requires either name and rendering, or renderings.');\n          _this.isLoading = false;\n          return;\n        }\n        const placeholder = _this.placeholderData;\n        if (!placeholder) {\n          console.warn(`Placeholder '${_this.name}' was not found in the current rendering data`, JSON.stringify(_this.rendering, null, 2));\n          _this.isLoading = false;\n          return;\n        }\n        // if the placeholder is empty (contains only raw renderings), then we may need to use the empty template if it's defined\n        const placeholderIsEmpty = placeholder.every(rendering => isRawRendering(rendering));\n        if (_this.renderEmptyTemplate && placeholderIsEmpty) {\n          _this.view.createEmbeddedView(_this.renderEmptyTemplate.templateRef, {\n            renderings: placeholder\n          });\n          _this.isLoading = false;\n        } else {\n          const factories = yield _this.componentFactory.getComponents(placeholder);\n          try {\n            const nonGuarded = yield _this.guardResolver(factories);\n            const withData = yield _this.dataResolver(nonGuarded);\n            // not using index to ensure code blocks are rendered at correct positions\n            withData.forEach(rendering => {\n              _this.metadataMode && _this.view.createEmbeddedView(_this.metadataNode, {\n                kind: MetadataKind.Open,\n                chromeType: 'rendering',\n                renderingId: rendering.factory.componentDefinition?.uid\n              });\n              if (_this.renderEachTemplate && !isRawRendering(rendering.factory.componentDefinition)) {\n                _this._renderTemplatedComponent(rendering.factory.componentDefinition);\n              } else {\n                _this._renderEmbeddedComponent(rendering.factory, rendering.data);\n              }\n              _this.metadataMode && _this.view.createEmbeddedView(_this.metadataNode, {\n                kind: MetadataKind.Close,\n                chromeType: 'rendering',\n                renderingId: rendering.factory.componentDefinition?.uid\n              });\n            });\n            _this.isLoading = false;\n            _this.changeDetectorRef.markForCheck();\n            _this.loaded.emit(_this.name);\n          } catch (e) {\n            _this.isLoading = false;\n            if (e instanceof JssCanActivateRedirectError) {\n              const redirectValue = e.redirectValue;\n              if (redirectValue instanceof UrlTree) {\n                _this.router.navigateByUrl(redirectValue);\n              } else if (typeof redirectValue === 'string') {\n                _this.router.navigate([redirectValue]);\n              } else {\n                _this.router.navigate(redirectValue);\n              }\n            } else {\n              _this.failed.emit(e);\n              console.warn(`Placeholder '${_this.name}' was not able to render with the current rendering data and error`, JSON.stringify(_this.rendering, null, 2), e);\n              return;\n            }\n          }\n        }\n      })();\n    }\n    _renderTemplatedComponent(rendering) {\n      // the render-each template takes care of all component mapping etc\n      // generally using <sc-render-component> which is about like _renderEmbeddedComponent()\n      // as a separate component\n      this.view.createEmbeddedView(this.renderEachTemplate.templateRef, {\n        rendering\n      });\n    }\n    _renderEmbeddedComponent(rendering, data) {\n      if (rendering.componentDefinition.componentName === constants.HIDDEN_RENDERING_NAME) {\n        rendering.componentImplementation = this.hiddenRenderingComponent;\n      }\n      if (!rendering.componentImplementation) {\n        const componentName = rendering.componentDefinition.componentName;\n        console.error(`Placeholder ${this.name} contains unknown component ${componentName}.`, `Ensure component is mapped, like:\n        JssModule.withComponents([\n          { name: '${componentName}', type: ${componentName}Component }\n        ])`);\n        rendering.componentImplementation = this.missingComponentComponent;\n      }\n      // apply the parent style attribute _ngcontent\n      // work-around for https://github.com/angular/angular/issues/12215\n      const createdComponentRef = this.view.createComponent(rendering.componentImplementation, {\n        ngModuleRef: rendering.componentModuleRef\n      });\n      if (this.parentStyleAttribute) {\n        this.renderer.setAttribute(createdComponentRef.location.nativeElement, this.parentStyleAttribute, '');\n      }\n      const componentInstance = createdComponentRef.instance;\n      componentInstance.rendering = rendering.componentDefinition;\n      componentInstance.data = data;\n      if (this._inputs) {\n        this._setComponentInputs(componentInstance, this._inputs);\n      }\n      if (this.outputs) {\n        this._subscribeComponentOutputs(componentInstance, this.outputs);\n      }\n      this._componentInstances.push(componentInstance);\n    }\n    static ɵfac = function PlaceholderComponent_Factory(t) {\n      return new (t || PlaceholderComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i1.JssComponentFactoryService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(PLACEHOLDER_MISSING_COMPONENT_COMPONENT), i0.ɵɵdirectiveInject(PLACEHOLDER_HIDDEN_RENDERING_COMPONENT), i0.ɵɵdirectiveInject(GUARD_RESOLVER), i0.ɵɵdirectiveInject(DATA_RESOLVER), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i3.JssStateService));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: PlaceholderComponent,\n      selectors: [[\"sc-placeholder\"], [\"\", \"sc-placeholder\", \"\"]],\n      contentQueries: function PlaceholderComponent_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, RenderEachDirective, 7);\n          i0.ɵɵcontentQuery(dirIndex, RenderEmptyDirective, 7);\n          i0.ɵɵcontentQuery(dirIndex, PlaceholderLoadingDirective, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.renderEachTemplate = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.renderEmptyTemplate = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.placeholderLoading = _t.first);\n        }\n      },\n      viewQuery: function PlaceholderComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n          i0.ɵɵviewQuery(_c1, 5, TemplateRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.view = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.metadataNode = _t.first);\n        }\n      },\n      inputs: {\n        name: \"name\",\n        rendering: \"rendering\",\n        renderings: \"renderings\",\n        outputs: \"outputs\",\n        clientOnly: \"clientOnly\",\n        inputs: \"inputs\"\n      },\n      outputs: {\n        loaded: \"loaded\",\n        failed: \"failed\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 7,\n      vars: 7,\n      consts: [[\"metadataCodeBlock\", \"\"], [\"view\", \"\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngTemplateOutlet\"], [\"type\", \"text/sitecore\", 1, \"scpm\"]],\n      template: function PlaceholderComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, PlaceholderComponent_0_Template, 1, 1, null, 2)(1, PlaceholderComponent_ng_template_1_Template, 1, 3, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor)(3, PlaceholderComponent_ng_container_3_Template, 1, 0, \"ng-container\", 3)(4, PlaceholderComponent_ng_template_4_Template, 0, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor)(6, PlaceholderComponent_ng_container_6_Template, 1, 0, \"ng-container\", 3);\n        }\n        if (rf & 2) {\n          const metadataCodeBlock_r5 = i0.ɵɵreference(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.metadataMode && metadataCodeBlock_r5)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction0(5, _c2));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.metadataMode && metadataCodeBlock_r5)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction0(6, _c3));\n        }\n      },\n      dependencies: [i4.NgIf, i4.NgTemplateOutlet],\n      encapsulation: 2\n    });\n  }\n  return PlaceholderComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}