{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EMPTY_DATE_FIELD_VALUE = exports.isDynamicPlaceholder = exports.getDynamicPlaceholderPattern = void 0;\nexports.getFieldValue = getFieldValue;\nexports.getChildPlaceholder = getChildPlaceholder;\nexports.isFieldValueEmpty = isFieldValueEmpty;\n/**\n * @param {ComponentRendering | Fields} renderingOrFields the rendering or fields object to extract the field from\n * @param {string} fieldName the name of the field to extract\n * @param {T} [defaultValue] the default value to return if the field is not defined\n * @returns {Field | T} the field value or the default value if the field is not defined\n */\n// eslint-disable-next-line no-redeclare\nfunction getFieldValue(renderingOrFields, fieldName, defaultValue) {\n  if (!renderingOrFields || !fieldName) {\n    return defaultValue;\n  }\n  const fields = renderingOrFields;\n  const field = fields[fieldName];\n  if (field && typeof field.value !== 'undefined') {\n    return field.value;\n  }\n  const rendering = renderingOrFields;\n  if (!rendering.fields || !rendering.fields[fieldName] || typeof rendering.fields[fieldName].value === 'undefined') {\n    return defaultValue;\n  }\n  return rendering.fields[fieldName].value;\n}\n/**\n * Gets rendering definitions in a given child placeholder under a current rendering.\n * @param {ComponentRendering} rendering\n * @param {string} placeholderName\n * @returns {Array<ComponentRendering | HtmlElementRendering>} child placeholder\n */\nfunction getChildPlaceholder(rendering, placeholderName) {\n  if (!rendering || !placeholderName || !rendering.placeholders || !rendering.placeholders[placeholderName]) {\n    return [];\n  }\n  return rendering.placeholders[placeholderName];\n}\n/**\n * Returns a regular expression pattern for a dynamic placeholder name.\n * @param {string} placeholder Placeholder name with a dynamic segment (e.g. 'main-{*}')\n * @returns Regular expression pattern for the dynamic segment\n */\nconst getDynamicPlaceholderPattern = placeholder => {\n  return new RegExp(`^${placeholder.replace(/\\{\\*\\}+/i, '\\\\d+')}$`);\n};\nexports.getDynamicPlaceholderPattern = getDynamicPlaceholderPattern;\n/**\n * Checks if the placeholder name is dynamic.\n * @param {string} placeholder Placeholder name\n * @returns True if the placeholder name is dynamic\n */\nconst isDynamicPlaceholder = placeholder => placeholder.indexOf('{*}') !== -1;\nexports.isDynamicPlaceholder = isDynamicPlaceholder;\n/**\n * The default value for an empty Date field.\n * This value is defined as a default one by .NET\n */\nexports.EMPTY_DATE_FIELD_VALUE = '0001-01-01T00:00:00Z';\n/**\n * Determines if the passed in field object's value is empty.\n * @param {GenericFieldValue | Partial<Field>} field the field object.\n * Partial<T> type is used here because _field.value_ could be required or optional for the different field types\n */\nfunction isFieldValueEmpty(field) {\n  const isImageFieldEmpty = fieldValue => !fieldValue.src;\n  const isFileFieldEmpty = fieldValue => !fieldValue.src;\n  const isLinkFieldEmpty = fieldValue => !fieldValue.href;\n  const isDateFieldEmpty = fieldValue => {\n    if (typeof fieldValue === 'string') {\n      return fieldValue === exports.EMPTY_DATE_FIELD_VALUE;\n    } else {\n      return !(typeof (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.getMonth) === 'function' && !isNaN(fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.getMonth()));\n    }\n  };\n  const isEmpty = fieldValue => {\n    if (fieldValue === null || fieldValue === undefined) {\n      return true;\n    }\n    if (typeof fieldValue === 'object') {\n      return isImageFieldEmpty(fieldValue) && isFileFieldEmpty(fieldValue) && isLinkFieldEmpty(fieldValue) && isDateFieldEmpty(fieldValue);\n    } else if (typeof fieldValue === 'number' || typeof fieldValue === 'boolean') {\n      // Avoid returning true for 0 and false values\n      return false;\n    } else {\n      return !fieldValue || isDateFieldEmpty(fieldValue);\n    }\n  };\n  if (!field) return true;\n  const dynamicField = field;\n  if (dynamicField.value !== undefined) {\n    return isEmpty(dynamicField.value);\n  }\n  return isEmpty(field);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}