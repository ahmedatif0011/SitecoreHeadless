{"ast":null,"code":"// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.\n/**\n * The functions provided in the module work only in node environments an chromium based browsers.\n * The public functions will do the required checks internally so no extra work needed outside this module.\n * If colors are supported they will be applied and the colorized version of the text will be returned,\n * otherwise the original text will be returned.\n */\n/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * The ANSI CODES for colors needed in the SDK\n */\nconst COLORS = {\n  BLUE: '\\u001B[34m',\n  CYAN: '\\u001B[36m',\n  GREEN: '\\u001B[32m',\n  RED: '\\u001B[31m',\n  RESET: '\\u001B[0m',\n  YELLOW: '\\u001B[33m'\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n/**\n * Checks if the browser is based on chromium\n * @returns true if the browser is based on chromium and false otherwise\n */\nfunction isChromiumBrowser() {\n  return navigator.userAgent.includes('Chrome');\n}\n/**\n * Checks if the current running environment is browser\n * @returns true if the environment is browser and false otherwise\n */\nfunction isBrowserEnvironment() {\n  return typeof window !== 'undefined';\n}\n/**\n * Checks if the current running environment supports colors\n * @returns true if the environment supports colors and false otherwise\n */\nfunction isColorsSupported() {\n  return isBrowserEnvironment() && isChromiumBrowser() || !isBrowserEnvironment();\n}\n/**\n * Checks and applies the color if the environment supports colors\n * @returns the colorized string if supported or the original text\n */\nfunction colorizeText(color, text) {\n  return isColorsSupported() ? `${color}${text}${COLORS.RESET}` : text;\n}\n/**\n * A function changes the text to red color if in supported environment\n * @returns A string with \\\\u001B[31m prefix and \\\\u001B[0m suffix or the original text\n */\nexport function red(text) {\n  return colorizeText(COLORS.RED, text);\n}\n/**\n * A function changes the text to blue color if in supported environment\n * @returns A string with \\\\u001B[34m prefix and \\\\u001B[0m suffix or the original text\n */\nexport function blue(text) {\n  return colorizeText(COLORS.BLUE, text);\n}\n/**\n * A function changes the text to cyan color if in supported environment\n * @returns A string with \\\\u001B[36m prefix and \\\\u001B[0m suffix or the original text\n */\nexport function cyan(text) {\n  return colorizeText(COLORS.CYAN, text);\n}\n/**\n * A function changes the text to green color if in supported environment\n * @returns A string with \\\\u001B[32m prefix and \\\\u001B[0m suffix or the original text\n */\nexport function green(text) {\n  return colorizeText(COLORS.GREEN, text);\n}\n/**\n * A function changes the text to yellow color if in supported environment\n * @returns A string with \\\\u001B[33m prefix and \\\\u001B[0m suffix or the original text\n */\nexport function yellow(text) {\n  return colorizeText(COLORS.YELLOW, text);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}