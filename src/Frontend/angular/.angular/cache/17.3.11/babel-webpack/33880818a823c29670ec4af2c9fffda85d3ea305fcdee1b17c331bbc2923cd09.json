{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.\nimport { language, pageName } from '@sitecore-cloudsdk/core/internal';\nimport { CustomEvent } from '../events';\nimport { sendEvent } from '../events/send-event/sendEvent';\nclass EventQueue {\n  constructor() {\n    /**\n     * Initialize the Event Storage\n     */\n    this.key = 'EventQueue';\n  }\n  /** Returns the stored array of data with type QueueEventPayload, or empty array if the given key does not exist. */\n  getEventQueue() {\n    const sessionStorage = this.getSessionStorage();\n    const storedQueue = sessionStorage.getItem(this.key) ?? '\"\"';\n    try {\n      const parsedQueueEvent = JSON.parse(storedQueue);\n      return Array.isArray(parsedQueueEvent) ? parsedQueueEvent : [];\n    } catch {\n      return [];\n    }\n  }\n  /**\n   * Adds the required event data to the queue and stores it in the storage.\n   * @param queueEventPayload - The required event data for the creation of a CustomEvent.\n   * Performs validation by creating a new CustomEvent.\n   */\n  enqueueEvent(queueEventPayload) {\n    const sessionStorage = this.getSessionStorage();\n    queueEventPayload.eventData.page = queueEventPayload.eventData.page ?? pageName();\n    queueEventPayload.eventData.language = queueEventPayload.eventData.language ?? language();\n    new CustomEvent({\n      sendEvent,\n      ...queueEventPayload\n    });\n    const eventQueue = this.getEventQueue();\n    eventQueue.push(queueEventPayload);\n    sessionStorage.setItem(this.key, JSON.stringify(eventQueue));\n  }\n  /**\n   * Iterates the queue, and sends sequently the custom events to Sitecore EP.\n   */\n  sendAllEvents() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const eventQueue = _this.getEventQueue();\n      for (const queueEventPayload of eventQueue) yield new CustomEvent({\n        eventData: queueEventPayload.eventData,\n        id: queueEventPayload.id,\n        sendEvent,\n        settings: queueEventPayload.settings\n      }).send();\n      _this.clearQueue();\n    })();\n  }\n  /**\n   * Clears the queue from storage.\n   */\n  clearQueue() {\n    const sessionStorage = this.getSessionStorage();\n    sessionStorage.removeItem(this.key);\n  }\n  getSessionStorage() {\n    return sessionStorage;\n  }\n}\nexport const eventQueue = new EventQueue();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}