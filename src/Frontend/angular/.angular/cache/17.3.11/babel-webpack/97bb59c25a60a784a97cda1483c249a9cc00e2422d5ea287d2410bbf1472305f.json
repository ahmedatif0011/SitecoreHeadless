{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.\nimport { createCookieString, getCookie } from '@sitecore-cloudsdk/utils';\nimport { fetchBrowserIdFromEdgeProxy } from '../../browser-id/fetch-browser-id-from-edge-proxy';\nimport { getBrowserId } from '../../browser-id/get-browser-id';\nimport { COOKIE_NAME_PREFIX, DEFAULT_COOKIE_EXPIRY_DAYS, ErrorMessages, LIBRARY_VERSION, SITECORE_EDGE_URL } from '../../consts';\nimport { getDefaultCookieAttributes } from '../../cookie/get-default-cookie-attributes';\nimport { debug } from '../../debug/debug';\nimport { CORE_NAMESPACE } from '../../debug/namespaces';\nimport { getGuestId } from '../../guest-id/get-guest-id';\nexport let cloudSDKSettings;\nexport const enabledPackages = new Map();\nexport let initCoreState = null;\nexport let cookiesValuesFromEdge;\nexport class CloudSDKBrowserInitializer {\n  /**\n   * Runs the initialization logic. Enables packages and create cookies for CloudSDK.\n   * @param settings - Common settings for the CloudSDK\n   * @throws the following errors:\n   * {@link ErrorMessages.MV_0001}\n   * {@link ErrorMessages.MV_0002}\n   * {@link ErrorMessages.IE_0001}\n   * {@link ErrorMessages.IV_0001}\n   */\n  constructor(settings) {\n    if (typeof window === 'undefined') throw new Error(ErrorMessages.IE_0001);\n    this.validateSettings(settings);\n    cloudSDKSettings = this.createSettings(settings);\n  }\n  /**\n   * Runs the initialization logic. Enables packages and create cookies for CloudSDK.\n   */\n  initialize() {\n    if (!enabledPackages.size) debug(CORE_NAMESPACE)('CloudSDK was initialized with no packages');\n    if (cloudSDKSettings.cookieSettings.enableBrowserCookie) initCoreState = this.createCookies();else initCoreState = Promise.resolve();\n    this.sideEffects();\n    enabledPackages.forEach(pkg => {\n      pkg.exec();\n    });\n  }\n  /**\n   * Runs any necessary side effects.\n   */\n  sideEffects() {\n    window.scCloudSDK = {\n      ...window.scCloudSDK,\n      core: {\n        getBrowserId,\n        getGuestId,\n        settings: {\n          siteName: cloudSDKSettings.siteName,\n          sitecoreEdgeContextId: cloudSDKSettings.sitecoreEdgeContextId,\n          sitecoreEdgeUrl: cloudSDKSettings.sitecoreEdgeUrl\n        },\n        version: LIBRARY_VERSION\n      }\n    };\n  }\n  /**\n   * Validates the core settings to ensure they meet required criteria.\n   *\n   * This function validates the provided core settings object to ensure that essential properties\n   * such as \"sitecoreEdgeContextId\" and \"siteName\" meet specific criteria and are not empty.\n   *\n   * @throws Error with specific error codes if any required property is missing or empty.\n   */\n  validateSettings(settings) {\n    const {\n      sitecoreEdgeContextId,\n      siteName,\n      sitecoreEdgeUrl\n    } = settings;\n    if (!sitecoreEdgeContextId || sitecoreEdgeContextId.trim().length === 0) throw new Error(ErrorMessages.MV_0001);\n    if (!siteName || siteName.trim().length === 0) throw new Error(ErrorMessages.MV_0002);\n    if (sitecoreEdgeUrl !== undefined) try {\n      new URL(sitecoreEdgeUrl);\n    } catch (e) {\n      throw new Error(ErrorMessages.IV_0001);\n    }\n  }\n  createSettings(settings) {\n    const {\n      siteName,\n      sitecoreEdgeContextId,\n      cookieDomain,\n      cookiePath,\n      cookieExpiryDays,\n      sitecoreEdgeUrl,\n      enableBrowserCookie\n    } = settings;\n    return {\n      cookieSettings: {\n        domain: cookieDomain,\n        enableBrowserCookie: enableBrowserCookie ?? false,\n        expiryDays: cookieExpiryDays || DEFAULT_COOKIE_EXPIRY_DAYS,\n        name: {\n          browserId: `${COOKIE_NAME_PREFIX}${sitecoreEdgeContextId}`\n        },\n        path: cookiePath || '/'\n      },\n      siteName,\n      sitecoreEdgeContextId,\n      sitecoreEdgeUrl: sitecoreEdgeUrl ?? SITECORE_EDGE_URL\n    };\n  }\n  createCookies() {\n    return _asyncToGenerator(function* () {\n      const attributes = getDefaultCookieAttributes(cloudSDKSettings.cookieSettings.expiryDays, cloudSDKSettings.cookieSettings.domain);\n      const browserIdCookie = getCookie(window.document.cookie, cloudSDKSettings.cookieSettings.name.browserId);\n      if (browserIdCookie) return;\n      const cookiesValues = yield fetchBrowserIdFromEdgeProxy(cloudSDKSettings.sitecoreEdgeUrl, cloudSDKSettings.sitecoreEdgeContextId);\n      document.cookie = createCookieString(cloudSDKSettings.cookieSettings.name.browserId, cookiesValues.browserId, attributes);\n      cookiesValuesFromEdge = cookiesValues;\n    })();\n  }\n}\nexport function getCloudSDKSettings() {\n  if (!cloudSDKSettings) throw new Error(ErrorMessages.IE_0012);\n  return cloudSDKSettings;\n}\nexport function getEnabledPackage(packageName) {\n  return enabledPackages.get(packageName);\n}\nexport let builderInstance = null;\nexport function getCookiesValuesFromEdge() {\n  return cookiesValuesFromEdge;\n}\n/**\n * Runs the initialization logic. Enables packages and create cookies for CloudSDK.\n * @param settings - Common settings for the CloudSDK\n * @returns An instance of {@link CloudSDKBrowserInitializer}\n * @throws the following errors:\n * {@link ErrorMessages.MV_0001}\n * {@link ErrorMessages.MV_0002}\n * {@link ErrorMessages.IE_0001}\n * {@link ErrorMessages.IV_0001}\n */\nexport function CloudSDK(settings) {\n  builderInstance = new CloudSDKBrowserInitializer(settings);\n  return builderInstance;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}