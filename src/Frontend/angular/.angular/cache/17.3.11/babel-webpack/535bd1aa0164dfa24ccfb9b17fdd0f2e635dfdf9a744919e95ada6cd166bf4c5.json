{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { MAX_EXT_ATTRIBUTES, UTM_PREFIX } from '../consts';\nimport { BaseEvent } from '../base-event';\nimport { ErrorMessages } from '../../consts';\nimport { flattenObject } from '@sitecore-cloudsdk/utils';\nexport let PageViewEvent = /*#__PURE__*/(() => {\n  class PageViewEvent extends BaseEvent {\n    /**\n     * A class that extends from {@link BaseEvent} and has all the required functionality to send a VIEW event\n     * @param args - Unified object containing the required properties\n     */\n    constructor(args) {\n      const {\n        channel,\n        currency,\n        language,\n        page,\n        extensionData\n      } = {\n        ...args.pageViewData\n      };\n      super({\n        channel,\n        currency,\n        language,\n        page\n      }, args.id);\n      this.extensionData = {};\n      this.pageViewData = args.pageViewData;\n      this.sendEvent = args.sendEvent;\n      this.settings = args.settings;\n      this.urlSearchParams = new URLSearchParams(decodeURI(args.searchParams));\n      if (extensionData) this.extensionData = flattenObject({\n        object: extensionData\n      });\n      const numberOfExtensionDataProperties = Object.entries(this.extensionData).length;\n      if (numberOfExtensionDataProperties > MAX_EXT_ATTRIBUTES) throw new Error(ErrorMessages.IV_0005);\n      this.includeUTMParameters = (args.pageViewData && args.pageViewData.includeUTMParameters) ?? true;\n    }\n    /**\n     * Gets the variant ID from the url if not passed by the developer\n     * Gets the variant ID from the extension data if not found from the url\n     * @returns - variant ID or null\n     */\n    getPageVariantId(pageVariantIdFromPageViewData, pageVariantIdFromExt) {\n      if (pageVariantIdFromPageViewData) return pageVariantIdFromPageViewData;\n      const pageVariantIdFromURL = this.urlSearchParams.get('variantid');\n      if (pageVariantIdFromURL) return pageVariantIdFromURL;\n      if (pageVariantIdFromExt) return pageVariantIdFromExt;\n      return null;\n    }\n    /**\n     * Returns the referrer if exists on page view event else null if we are on server and no referrer is on event, else\n     * returns the href if on client side and the document referrer is different from the window location hostname\n     * @returns - the referrer\n     */\n    getReferrer() {\n      if (this.pageViewData?.referrer) return this.pageViewData.referrer;\n      if (typeof window === 'undefined') return null;\n      if (!PageViewEvent.isFirstPageView || !document.referrer) return null;\n      const {\n        hostname,\n        href\n      } = new URL(document.referrer);\n      return window.location.hostname !== hostname ? href : null;\n    }\n    /**\n     * Maps parameters given as input to corresponding attributes send to the API\n     * @returns the mapped object to be sent as payload\n     */\n    mapAttributes() {\n      let pageViewPayload = {\n        type: 'VIEW'\n      };\n      const pageVariantId = this.pageViewData && this.getPageVariantId(this.pageViewData.pageVariantId, this.extensionData['pageVariantId']);\n      if (pageVariantId !== null) pageViewPayload.ext = {\n        ...pageViewPayload.ext,\n        pageVariantId\n      };\n      if (Object.keys(this.extensionData).length > 0) {\n        delete this.extensionData['pageVariantId'];\n        pageViewPayload.ext = {\n          ...pageViewPayload.ext,\n          ...this.extensionData\n        };\n      }\n      if (this.includeUTMParameters) {\n        const utmParameters = this.getUTMParameters();\n        pageViewPayload = {\n          ...pageViewPayload,\n          ...utmParameters\n        };\n      }\n      const referrer = this.getReferrer();\n      if (referrer !== null) pageViewPayload = {\n        ...pageViewPayload,\n        referrer\n      };\n      if (this.pageViewData?.searchData) pageViewPayload.sc_search = {\n        data: this.pageViewData.searchData,\n        metadata: {\n          // eslint-disable-next-line @typescript-eslint/naming-convention\n          ut_api_version: '1.0'\n        }\n      };\n      return pageViewPayload;\n    }\n    /**\n     * Sends the event to Sitecore EP\n     * @returns - A promise that resolves with either the Sitecore EP response object or null\n     */\n    send() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const baseAttr = _this.mapBaseEventPayload();\n        const eventAttrs = _this.mapAttributes();\n        PageViewEvent.isFirstPageView = false;\n        return yield _this.sendEvent({\n          ...baseAttr,\n          ...eventAttrs\n        }, _this.settings);\n      })();\n    }\n    /**\n     * Retrieves UTM parameters from the url query string\n     * @returns - an object containing the UTM parameters if they exist\n     */\n    getUTMParameters() {\n      const utmParameters = {};\n      this.urlSearchParams.forEach((value, key) => {\n        const param = key.toLowerCase();\n        if (param.indexOf(UTM_PREFIX) === 0) utmParameters[param] = value;\n      });\n      return utmParameters;\n    }\n  }\n  PageViewEvent.isFirstPageView = true;\n  return PageViewEvent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}