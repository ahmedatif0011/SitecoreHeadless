{"ast":null,"code":"import { Component, Inject, Input, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { takeWhile } from 'rxjs/operators';\nimport { PLACEHOLDER_MISSING_COMPONENT_COMPONENT } from '../services/placeholder.token';\nimport { RawComponent } from './raw.component';\nimport { isRawRendering } from './rendering';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/jss-component-factory.service\";\n/**\n * Renders a single JSS component given a rendering definition.\n * Useful inside templated placeholders.\n */\nconst _c0 = [\"view\"];\nfunction RenderComponentComponent_ng_template_0_Template(rf, ctx) {}\nexport let RenderComponentComponent = /*#__PURE__*/(() => {\n  class RenderComponentComponent {\n    differs;\n    componentFactory;\n    missingComponentComponent;\n    rendering;\n    outputs;\n    view;\n    _inputs;\n    _differ;\n    destroyed = false;\n    constructor(differs, componentFactory, missingComponentComponent) {\n      this.differs = differs;\n      this.componentFactory = componentFactory;\n      this.missingComponentComponent = missingComponentComponent;\n    }\n    set inputs(value) {\n      this._inputs = value;\n      if (!this._differ && value) {\n        this._differ = this.differs.find(value).create();\n      }\n    }\n    ngOnChanges(changes) {\n      if (changes.rendering) {\n        this._render();\n      }\n    }\n    _setComponentInputs(componentInstance, inputs) {\n      Object.entries(inputs).forEach(([input, inputValue]) => componentInstance[input] = inputValue);\n    }\n    _subscribeComponentOutputs(componentInstance, outputs) {\n      Object.keys(outputs).filter(output => componentInstance[output] && componentInstance[output] instanceof Observable).forEach(output => componentInstance[output].pipe(takeWhile(() => !this.destroyed)).subscribe(outputs[output]));\n    }\n    _render() {\n      this.view.clear();\n      if (!this.rendering) {\n        return;\n      }\n      const resolveComponent = isRawRendering(this.rendering) ? Promise.resolve({\n        componentImplementation: RawComponent,\n        componentDefinition: this.rendering\n      }) : this.componentFactory.getComponent(this.rendering);\n      resolveComponent.then(rendering => {\n        if (!rendering.componentImplementation) {\n          const componentName = rendering.componentDefinition.componentName;\n          console.error(`Attempted to render unknown component ${componentName}.`, `Ensure component is mapped, like:\n          JssModule.withComponents([\n            { name: '${componentName}', type: ${componentName}Component }\n          ])`);\n          rendering.componentImplementation = this.missingComponentComponent;\n        }\n        const componentInstance = this.view.createComponent(rendering.componentImplementation).instance;\n        componentInstance.rendering = rendering.componentDefinition;\n        if (this._inputs) {\n          this._setComponentInputs(componentInstance, this._inputs);\n        }\n        if (this.outputs) {\n          this._subscribeComponentOutputs(componentInstance, this.outputs);\n        }\n      });\n    }\n    static ɵfac = function RenderComponentComponent_Factory(t) {\n      return new (t || RenderComponentComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i1.JssComponentFactoryService), i0.ɵɵdirectiveInject(PLACEHOLDER_MISSING_COMPONENT_COMPONENT));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: RenderComponentComponent,\n      selectors: [[\"sc-render-component\"]],\n      viewQuery: function RenderComponentComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.view = _t.first);\n        }\n      },\n      inputs: {\n        rendering: \"rendering\",\n        outputs: \"outputs\",\n        inputs: \"inputs\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 2,\n      vars: 0,\n      consts: [[\"view\", \"\"]],\n      template: function RenderComponentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, RenderComponentComponent_ng_template_0_Template, 0, 0, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return RenderComponentComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}