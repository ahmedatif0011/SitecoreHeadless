{"ast":null,"code":"import { Component, Inject } from '@angular/core';\nimport { getJssPagesClientData } from '@sitecore-jss/sitecore-jss/editing';\nimport { DOCUMENT } from '@angular/common';\nimport { EditMode, LayoutServicePageState } from '@sitecore-jss/sitecore-jss/layout';\nimport { isServer } from '@sitecore-jss/sitecore-jss/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/jss-state.service\";\n/**\n * Component that renders editing scripts and client data for the current page in Sitecore Editor.\n * Only renders scripts when Metadata mode is used.\n */\nexport let EditingScriptsComponent = /*#__PURE__*/(() => {\n  class EditingScriptsComponent {\n    renderer;\n    stateService;\n    document;\n    constructor(renderer, stateService, document) {\n      this.renderer = renderer;\n      this.stateService = stateService;\n      this.document = document;\n    }\n    ngOnInit() {\n      const state = this.stateService.stateValue;\n      const {\n        pageState,\n        editMode,\n        clientData,\n        clientScripts\n      } = state.sitecore?.context || {};\n      // Don't render anything if not in editing mode or not server side\n      if (pageState === LayoutServicePageState.Normal || pageState === LayoutServicePageState.Preview || !isServer()) {\n        return;\n      }\n      if (editMode === EditMode.Metadata) {\n        const jssClientData = {\n          ...clientData,\n          ...getJssPagesClientData()\n        };\n        clientScripts?.forEach(src => {\n          const scriptElement = this.renderer.createElement('script');\n          scriptElement.src = src;\n          this.renderer.appendChild(this.document.body, scriptElement);\n        });\n        Object.keys(jssClientData).forEach(id => {\n          const scriptElement = this.renderer.createElement('script');\n          scriptElement.id = id;\n          scriptElement.type = 'application/json';\n          scriptElement.innerHTML = JSON.stringify(jssClientData[id]);\n          this.renderer.appendChild(this.document.body, scriptElement);\n        });\n      }\n    }\n    static ɵfac = function EditingScriptsComponent_Factory(t) {\n      return new (t || EditingScriptsComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.JssStateService), i0.ɵɵdirectiveInject(DOCUMENT));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: EditingScriptsComponent,\n      selectors: [[\"sc-editing-scripts\"]],\n      decls: 0,\n      vars: 0,\n      template: function EditingScriptsComponent_Template(rf, ctx) {},\n      encapsulation: 2\n    });\n  }\n  return EditingScriptsComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdGluZy1zY3JpcHRzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2VkaXRpbmctc2NyaXB0cy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBcUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDOzs7QUFFNUQ7OztHQUdHO0FBS0gsTUFBTSxPQUFPLHVCQUF1QjtJQUV4QjtJQUNBO0lBQ2tCO0lBSDVCLFlBQ1UsUUFBbUIsRUFDbkIsWUFBNkIsRUFDWCxRQUFrQjtRQUZwQyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFpQjtRQUNYLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDM0MsQ0FBQztJQUVKLFFBQVE7UUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUMzQyxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLElBQUksRUFBRSxDQUFDO1FBRXpGLGtFQUFrRTtRQUNsRSxJQUNFLFNBQVMsS0FBSyxzQkFBc0IsQ0FBQyxNQUFNO1lBQzNDLFNBQVMsS0FBSyxzQkFBc0IsQ0FBQyxPQUFPO1lBQzVDLENBQUMsUUFBUSxFQUFFLEVBQ1gsQ0FBQztZQUNELE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxRQUFRLEtBQUssUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25DLE1BQU0sYUFBYSxHQUFHLEVBQUUsR0FBRyxVQUFVLEVBQUUsR0FBRyxxQkFBcUIsRUFBRSxFQUFFLENBQUM7WUFDcEUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO2dCQUNyQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDNUQsYUFBYSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFVLEVBQUUsRUFBRTtnQkFDaEQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzVELGFBQWEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUN0QixhQUFhLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDO2dCQUN4QyxhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzVELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7d0dBcENVLHVCQUF1QiwwRUFJeEIsUUFBUTs0RkFKUCx1QkFBdUIsMERBRnhCLEVBQUU7OzRGQUVELHVCQUF1QjtrQkFKbkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUUsRUFBRTtpQkFDYjs7MEJBS0ksTUFBTTsyQkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGdldEpzc1BhZ2VzQ2xpZW50RGF0YSB9IGZyb20gJ0BzaXRlY29yZS1qc3Mvc2l0ZWNvcmUtanNzL2VkaXRpbmcnO1xyXG5pbXBvcnQgeyBKc3NTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9qc3Mtc3RhdGUuc2VydmljZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRWRpdE1vZGUsIExheW91dFNlcnZpY2VQYWdlU3RhdGUgfSBmcm9tICdAc2l0ZWNvcmUtanNzL3NpdGVjb3JlLWpzcy9sYXlvdXQnO1xyXG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJ0BzaXRlY29yZS1qc3Mvc2l0ZWNvcmUtanNzL3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdGhhdCByZW5kZXJzIGVkaXRpbmcgc2NyaXB0cyBhbmQgY2xpZW50IGRhdGEgZm9yIHRoZSBjdXJyZW50IHBhZ2UgaW4gU2l0ZWNvcmUgRWRpdG9yLlxyXG4gKiBPbmx5IHJlbmRlcnMgc2NyaXB0cyB3aGVuIE1ldGFkYXRhIG1vZGUgaXMgdXNlZC5cclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnc2MtZWRpdGluZy1zY3JpcHRzJyxcclxuICB0ZW1wbGF0ZTogJycsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBFZGl0aW5nU2NyaXB0c0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICBwcml2YXRlIHN0YXRlU2VydmljZTogSnNzU3RhdGVTZXJ2aWNlLFxyXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnRcclxuICApIHt9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlU2VydmljZS5zdGF0ZVZhbHVlO1xyXG4gICAgY29uc3QgeyBwYWdlU3RhdGUsIGVkaXRNb2RlLCBjbGllbnREYXRhLCBjbGllbnRTY3JpcHRzIH0gPSBzdGF0ZS5zaXRlY29yZT8uY29udGV4dCB8fCB7fTtcclxuXHJcbiAgICAvLyBEb24ndCByZW5kZXIgYW55dGhpbmcgaWYgbm90IGluIGVkaXRpbmcgbW9kZSBvciBub3Qgc2VydmVyIHNpZGVcclxuICAgIGlmIChcclxuICAgICAgcGFnZVN0YXRlID09PSBMYXlvdXRTZXJ2aWNlUGFnZVN0YXRlLk5vcm1hbCB8fFxyXG4gICAgICBwYWdlU3RhdGUgPT09IExheW91dFNlcnZpY2VQYWdlU3RhdGUuUHJldmlldyB8fFxyXG4gICAgICAhaXNTZXJ2ZXIoKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZWRpdE1vZGUgPT09IEVkaXRNb2RlLk1ldGFkYXRhKSB7XHJcbiAgICAgIGNvbnN0IGpzc0NsaWVudERhdGEgPSB7IC4uLmNsaWVudERhdGEsIC4uLmdldEpzc1BhZ2VzQ2xpZW50RGF0YSgpIH07XHJcbiAgICAgIGNsaWVudFNjcmlwdHM/LmZvckVhY2goKHNyYzogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2NyaXB0RWxlbWVudCA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgc2NyaXB0RWxlbWVudC5zcmMgPSBzcmM7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmRvY3VtZW50LmJvZHksIHNjcmlwdEVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIE9iamVjdC5rZXlzKGpzc0NsaWVudERhdGEpLmZvckVhY2goKGlkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBzY3JpcHRFbGVtZW50ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgICBzY3JpcHRFbGVtZW50LmlkID0gaWQ7XHJcbiAgICAgICAgc2NyaXB0RWxlbWVudC50eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgIHNjcmlwdEVsZW1lbnQuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoanNzQ2xpZW50RGF0YVtpZF0pO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5kb2N1bWVudC5ib2R5LCBzY3JpcHRFbGVtZW50KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}