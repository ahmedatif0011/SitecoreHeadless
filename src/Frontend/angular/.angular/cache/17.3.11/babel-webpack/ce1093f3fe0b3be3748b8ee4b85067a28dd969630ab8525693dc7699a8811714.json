{"ast":null,"code":"import { RouterModule, UrlSegment } from \"@angular/router\";\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NotFoundComponent } from \"./not-found/not-found.component\";\nimport { ServerErrorComponent } from \"./server-error/server-error.component\";\nimport { jssRouteResolver } from \"./jss-route-resolver.service\";\nimport { JssRouteBuilderService } from \"./jss-route-builder.service\";\nimport { JssModule } from \"@sitecore-jss/sitecore-jss-angular\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { TranslateModule } from \"@ngx-translate/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport function jssRouteMatcher(url) {\n  // use the route builder to parse out language / server route\n  const routeParser = new JssRouteBuilderService();\n  const route = routeParser.parseRouteUrl(url.map(segment => segment.toString()));\n  if (route == null) {\n    return null;\n  }\n  // convert props to route parameters\n  const posParams = {};\n  Object.keys(route).forEach(key => {\n    posParams[key] = new UrlSegment(route[key], null);\n  });\n  return {\n    consumed: url,\n    posParams\n  };\n}\nconst routes = [{\n  path: \"NotFound\",\n  component: NotFoundComponent\n}, {\n  path: \"ServerError\",\n  component: ServerErrorComponent\n}, {\n  // matcher is effectively a catch-all route\n  matcher: jssRouteMatcher,\n  component: LayoutComponent,\n  resolve: {\n    jssState: jssRouteResolver\n  },\n  runGuardsAndResolvers: \"always\"\n}];\nexport let RoutingModule = /*#__PURE__*/(() => {\n  class RoutingModule {\n    static ɵfac = function RoutingModule_Factory(t) {\n      return new (t || RoutingModule)();\n    };\n    static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: RoutingModule\n    });\n    static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [JssRouteBuilderService],\n      imports: [RouterModule.forRoot(routes, {\n        onSameUrlNavigation: \"reload\",\n        initialNavigation: \"enabledBlocking\"\n      }), JssModule, TranslateModule, BrowserModule]\n    });\n  }\n  return RoutingModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}