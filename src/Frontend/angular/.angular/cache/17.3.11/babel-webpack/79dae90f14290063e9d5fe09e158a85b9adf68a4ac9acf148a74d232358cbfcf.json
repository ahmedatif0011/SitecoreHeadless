{"ast":null,"code":"import { Cache } from 'memory-cache';\n/**\n * Default cache configuration\n */\nconst DEFAULTS = Object.freeze({\n  cacheTimeout: 60,\n  cacheEnabled: true\n});\n/**\n * A cache client that uses the 'memory-cache' library (https://github.com/ptarjan/node-cache).\n * This class is meant to be extended or used as a mixin; it's not meant to be used directly.\n * @template T The type of data being cached.\n * @mixin\n */\nexport class MemoryCacheClient {\n  /**\n   * Initializes a new instance of @see MemoryCacheClient using the provided @see CacheOptions\n   * @param {CacheOptions} options Configuration options\n   */\n  constructor(options) {\n    var _a;\n    this.options = options;\n    this.cache = new Cache();\n    this.options.cacheTimeout = ((_a = this.options.cacheTimeout) !== null && _a !== void 0 ? _a : DEFAULTS.cacheTimeout) * 1000;\n    if (this.options.cacheEnabled === undefined) {\n      this.options.cacheEnabled = DEFAULTS.cacheEnabled;\n    }\n  }\n  /**\n   * Retrieves a value from the cache.\n   * @template T The type of data being cached.\n   * @param {string} key The cache key.\n   * @returns The cache value as {T}, or null if the specified key is not found in the cache.\n   */\n  getCacheValue(key) {\n    return this.options.cacheEnabled ? this.cache.get(key) : null;\n  }\n  /**\n   * Adds a value to the cache for the specified cache key.\n   * @template T The type of data being cached.\n   * @param {string} key The cache key.\n   * @param {T} value The value to cache.\n   * @returns The value added to the cache.\n   */\n  setCacheValue(key, value) {\n    return this.options.cacheEnabled ? this.cache.put(key, value, this.options.cacheTimeout) : value;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}