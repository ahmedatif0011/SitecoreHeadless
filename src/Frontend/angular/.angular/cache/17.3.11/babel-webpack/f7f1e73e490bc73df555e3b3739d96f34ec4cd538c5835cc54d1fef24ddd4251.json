{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { LayoutServicePageState } from '@sitecore-jss/sitecore-jss/layout';\nimport { getEdgeProxyFormsUrl } from '@sitecore-jss/sitecore-jss/graphql';\nimport { Component, Input, Inject, PLATFORM_ID } from '@angular/core';\nimport { EDGE_CONFIG } from '../services/shared.token';\nimport { isPlatformBrowser } from '@angular/common';\nimport { form } from '@sitecore-cloudsdk/events/browser';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/jss-state.service\";\nimport * as i2 from \"@angular/common\";\n/**\n * A component that renders a Sitecore Form.\n * It fetches the form markup from the Sitecore Edge service and renders it in the component's template.\n */\nfunction FormComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 1)(2, \"h2\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5, \"JSS component is missing FormId rendering parameter.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.rendering.componentName);\n  }\n}\nfunction FormComponent_ng_container_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtext(2, \"There was a problem loading this section\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction FormComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FormComponent_ng_container_0_ng_container_1_Template, 6, 1, \"ng-container\", 0)(2, FormComponent_ng_container_0_ng_container_2_Template, 3, 0, \"ng-container\", 0);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.rendering.params.FormId);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.hasError);\n  }\n}\nexport let FormComponent = /*#__PURE__*/(() => {\n  class FormComponent {\n    edgeConfig;\n    platformId;\n    elRef;\n    jssState;\n    /**\n     * The rendering data for the component\n     */\n    rendering;\n    hasError = false;\n    isEditing = false;\n    contextSubscription;\n    constructor(edgeConfig, platformId, elRef, jssState) {\n      this.edgeConfig = edgeConfig;\n      this.platformId = platformId;\n      this.elRef = elRef;\n      this.jssState = jssState;\n    }\n    ngOnInit() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.loadForm();\n        this.contextSubscription = this.jssState.state.subscribe(({\n          sitecore\n        }) => {\n          this.isEditing = sitecore?.context.pageState !== LayoutServicePageState.Normal;\n        });\n      }\n    }\n    ngOnDestroy() {\n      if (this.contextSubscription) {\n        this.contextSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Fetches the form markup from the Sitecore Edge service and renders it in the component's template.\n     */\n    loadForm() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const {\n          sitecoreEdgeContextId,\n          sitecoreEdgeUrl\n        } = _this.edgeConfig;\n        if (!_this.rendering.params.FormId) {\n          console.warn('Form was not able to render since FormId is not provided in the rendering data', JSON.stringify(_this.rendering, null, 2));\n          return;\n        }\n        const url = getEdgeProxyFormsUrl(sitecoreEdgeContextId, _this.rendering.params.FormId, sitecoreEdgeUrl);\n        try {\n          const rsp = yield fetch(url, {\n            method: 'GET',\n            cache: 'no-cache'\n          });\n          const content = yield rsp.text();\n          if (rsp.status !== 200) {\n            _this.hasError = true;\n            console.warn(`Form '${_this.rendering.params.FormId}' was not able to render with the current rendering data`, JSON.stringify(_this.rendering, null, 2), content);\n            return;\n          }\n          _this.elRef.nativeElement.innerHTML = content;\n          _this.executeScriptElements();\n          _this.subscribeToFormSubmitEvent();\n        } catch (error) {\n          console.warn(`Form '${_this.rendering.params.FormId}' was not able to render with the current rendering data`, JSON.stringify(_this.rendering, null, 2), error);\n          _this.hasError = true;\n        }\n      })();\n    }\n    /**\n     * Subscribes to the custom \"form:engage\" event and sends data to CloudSDK.\n     * This listener captures interactions such as form views or submissions\n     */\n    subscribeToFormSubmitEvent() {\n      const formElement = this.elRef.nativeElement.querySelector('form');\n      if (formElement) {\n        formElement.addEventListener('form:engage', e => {\n          if (this.isEditing) {\n            return;\n          }\n          const {\n            formId,\n            name\n          } = e.detail;\n          if (formId && name) {\n            console.log(`Sending form event: ${name} for FormId: ${formId}`);\n            form(formId, name, this.rendering.uid?.replace(/-/g, '') || '');\n          }\n        });\n      } else {\n        console.warn('No form element found to subscribe to submit event.');\n      }\n    }\n    /**\n     * When you set the innerHTML property of an element, the browser does not execute any <script> tags included in the HTML string\n     * This method ensures that any <script> elements within the loaded HTML are executed.\n     * It re-creates the script elements and appends the to the component's template, then removes old script elements to avoid duplication.\n     */\n    executeScriptElements() {\n      const scriptElements = this.elRef.nativeElement.querySelectorAll('script');\n      Array.from(scriptElements).forEach(scriptElement => {\n        const clonedElement = document.createElement('script');\n        Array.from(scriptElement.attributes).forEach(attribute => {\n          clonedElement.setAttribute(attribute.name, attribute.value);\n        });\n        clonedElement.text = scriptElement.text;\n        scriptElement?.parentNode?.replaceChild(clonedElement, scriptElement);\n      });\n    }\n    static ɵfac = function FormComponent_Factory(t) {\n      return new (t || FormComponent)(i0.ɵɵdirectiveInject(EDGE_CONFIG), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.JssStateService));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: FormComponent,\n      selectors: [[\"app-form\"]],\n      inputs: {\n        rendering: \"rendering\"\n      },\n      decls: 1,\n      vars: 1,\n      consts: [[4, \"ngIf\"], [2, \"background\", \"darkorange\", \"outline\", \"5px solid orange\", \"padding\", \"10px\", \"color\", \"white\", \"max-width\", \"500px\"], [1, \"sc-jss-placeholder-error\"]],\n      template: function FormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, FormComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.isEditing);\n        }\n      },\n      dependencies: [i2.NgIf],\n      encapsulation: 2\n    });\n  }\n  return FormComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXNCLHNCQUFzQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDL0YsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDMUUsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUVOLFdBQVcsR0FFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFtQixNQUFNLDBCQUEwQixDQUFDO0FBRXhFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXBELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7OztBQVl6RDs7O0dBR0c7QUFtQkgsTUFBTSxPQUFPLGFBQWE7SUFhTztJQUNBO0lBQ3JCO0lBQ0E7SUFmVjs7T0FFRztJQUNNLFNBQVMsQ0FBZ0I7SUFFbEMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUVqQixTQUFTLEdBQUcsS0FBSyxDQUFDO0lBRVYsbUJBQW1CLENBQWU7SUFFMUMsWUFDK0IsVUFBMkIsRUFDM0IsVUFBc0MsRUFDM0QsS0FBOEIsRUFDOUIsUUFBeUI7UUFISixlQUFVLEdBQVYsVUFBVSxDQUFpQjtRQUMzQixlQUFVLEdBQVYsVUFBVSxDQUE0QjtRQUMzRCxVQUFLLEdBQUwsS0FBSyxDQUF5QjtRQUM5QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtJQUNoQyxDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWhCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUss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ZFYsYUFBYSxvRkFoQmQ7Ozs7Ozs7Ozs7Ozs7O0dBY1Q7OzRGQUVVLGFBQWE7a0JBbEJ6QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7O0dBY1Q7aUJBQ0Y7OzBCQWNJLE1BQU07MkJBQUMsV0FBVzs7MEJBQ2xCLE1BQU07MkJBQUMsV0FBVztnR0FWWixTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVuZGVyaW5nLCBMYXlvdXRTZXJ2aWNlUGFnZVN0YXRlIH0gZnJvbSAnQHNpdGVjb3JlLWpzcy9zaXRlY29yZS1qc3MvbGF5b3V0JztcclxuaW1wb3J0IHsgZ2V0RWRnZVByb3h5Rm9ybXNVcmwgfSBmcm9tICdAc2l0ZWNvcmUtanNzL3NpdGVjb3JlLWpzcy9ncmFwaHFsJztcclxuaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgT25Jbml0LFxyXG4gIElucHV0LFxyXG4gIEluamVjdCxcclxuICBFbGVtZW50UmVmLFxyXG4gIFBMQVRGT1JNX0lELFxyXG4gIE9uRGVzdHJveSxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRURHRV9DT05GSUcsIEVkZ2VDb25maWdUb2tlbiB9IGZyb20gJy4uL3NlcnZpY2VzL3NoYXJlZC50b2tlbic7XHJcbmltcG9ydCB7IEpzc1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2pzcy1zdGF0ZS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZm9ybSB9IGZyb20gJ0BzaXRlY29yZS1jbG91ZHNkay9ldmVudHMvYnJvd3Nlcic7XHJcblxyXG4vKipcclxuICogU2hhcGUgb2YgdGhlIEZvcm0gY29tcG9uZW50IHJlbmRlcmluZyBkYXRhLlxyXG4gKiBGb3JtSWQgaXMgdGhlIHJlbmRlcmluZyBwYXJhbWV0ZXIgdGhhdCBzcGVjaWZpZXMgdGhlIElEIG9mIHRoZSBTaXRlY29yZSBGb3JtIHRvIHJlbmRlci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEZvcm1SZW5kZXJpbmcgPSB7XHJcbiAgcGFyYW1zOiB7XHJcbiAgICBGb3JtSWQ6IHN0cmluZztcclxuICB9O1xyXG59ICYgQ29tcG9uZW50UmVuZGVyaW5nO1xyXG5cclxuLyoqXHJcbiAqIEEgY29tcG9uZW50IHRoYXQgcmVuZGVycyBhIFNpdGVjb3JlIEZvcm0uXHJcbiAqIEl0IGZldGNoZXMgdGhlIGZvcm0gbWFya3VwIGZyb20gdGhlIFNpdGVjb3JlIEVkZ2Ugc2VydmljZSBhbmQgcmVuZGVycyBpdCBpbiB0aGUgY29tcG9uZW50J3MgdGVtcGxhdGUuXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1mb3JtJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImlzRWRpdGluZ1wiPlxyXG4gICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIXJlbmRlcmluZy5wYXJhbXMuRm9ybUlkXCI+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgc3R5bGU9XCJiYWNrZ3JvdW5kOiBkYXJrb3JhbmdlOyBvdXRsaW5lOiA1cHggc29saWQgb3JhbmdlOyBwYWRkaW5nOiAxMHB4OyBjb2xvcjogd2hpdGU7IG1heC13aWR0aDogNTAwcHg7XCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aDI+e3sgcmVuZGVyaW5nLmNvbXBvbmVudE5hbWUgfX08L2gyPlxyXG4gICAgICAgICAgPHA+SlNTIGNvbXBvbmVudCBpcyBtaXNzaW5nIEZvcm1JZCByZW5kZXJpbmcgcGFyYW1ldGVyLjwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJoYXNFcnJvclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzYy1qc3MtcGxhY2Vob2xkZXItZXJyb3JcIj5UaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhpcyBzZWN0aW9uPC9kaXY+XHJcbiAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgPC9uZy1jb250YWluZXI+XHJcbiAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgLyoqXHJcbiAgICogVGhlIHJlbmRlcmluZyBkYXRhIGZvciB0aGUgY29tcG9uZW50XHJcbiAgICovXHJcbiAgQElucHV0KCkgcmVuZGVyaW5nOiBGb3JtUmVuZGVyaW5nO1xyXG5cclxuICBoYXNFcnJvciA9IGZhbHNlO1xyXG5cclxuICBpc0VkaXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBjb250ZXh0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQEluamVjdChFREdFX0NPTkZJRykgcHJpdmF0ZSBlZGdlQ29uZmlnOiBFZGdlQ29uZmlnVG9rZW4sXHJcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IHsgW2tleTogc3RyaW5nXTogdW5rbm93biB9LFxyXG4gICAgcHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXHJcbiAgICBwcml2YXRlIGpzc1N0YXRlOiBKc3NTdGF0ZVNlcnZpY2VcclxuICApIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcclxuICAgICAgdGhpcy5sb2FkRm9ybSgpO1xyXG5cclxuICAgICAgdGhpcy5jb250ZXh0U3Vic2NyaXB0aW9uID0gdGhpcy5qc3NTdGF0ZS5zdGF0ZS5zdWJzY3JpYmUoKHsgc2l0ZWNvcmUgfSkgPT4ge1xyXG4gICAgICAgIHRoaXMuaXNFZGl0aW5nID0gc2l0ZWNvcmU/LmNvbnRleHQucGFnZVN0YXRlICE9PSBMYXlvdXRTZXJ2aWNlUGFnZVN0YXRlLk5vcm1hbDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmNvbnRleHRTdWJzY3JpcHRpb24pIHtcclxuICAgICAgdGhpcy5jb250ZXh0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGZXRjaGVzIHRoZSBmb3JtIG1hcmt1cCBmcm9tIHRoZSBTaXRlY29yZSBFZGdlIHNlcnZpY2UgYW5kIHJlbmRlcnMgaXQgaW4gdGhlIGNvbXBvbmVudCdzIHRlbXBsYXRlLlxyXG4gICAqL1xyXG4gIGFzeW5jIGxvYWRGb3JtKCkge1xyXG4gICAgY29uc3QgeyBzaXRlY29yZUVkZ2VDb250ZXh0SWQsIHNpdGVjb3JlRWRnZVVybCB9ID0gdGhpcy5lZGdlQ29uZmlnO1xyXG5cclxuICAgIGlmICghdGhpcy5yZW5kZXJpbmcucGFyYW1zLkZvcm1JZCkge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgJ0Zvcm0gd2FzIG5vdCBhYmxlIHRvIHJlbmRlciBzaW5jZSBGb3JtSWQgaXMgbm90IHByb3ZpZGVkIGluIHRoZSByZW5kZXJpbmcgZGF0YScsXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5yZW5kZXJpbmcsIG51bGwsIDIpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXJsID0gZ2V0RWRnZVByb3h5Rm9ybXNVcmwoXHJcbiAgICAgIHNpdGVjb3JlRWRnZUNvbnRleHRJZCxcclxuICAgICAgdGhpcy5yZW5kZXJpbmcucGFyYW1zLkZvcm1JZCxcclxuICAgICAgc2l0ZWNvcmVFZGdlVXJsXHJcbiAgICApO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJzcCA9IGF3YWl0IGZldGNoKHVybCwge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHJzcC50ZXh0KCk7XHJcblxyXG4gICAgICBpZiAocnNwLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWU7XHJcblxyXG4gICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgIGBGb3JtICcke3RoaXMucmVuZGVyaW5nLnBhcmFtcy5Gb3JtSWR9JyB3YXMgbm90IGFibGUgdG8gcmVuZGVyIHdpdGggdGhlIGN1cnJlbnQgcmVuZGVyaW5nIGRhdGFgLFxyXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5yZW5kZXJpbmcsIG51bGwsIDIpLFxyXG4gICAgICAgICAgY29udGVudFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcblxyXG4gICAgICB0aGlzLmV4ZWN1dGVTY3JpcHRFbGVtZW50cygpO1xyXG4gICAgICB0aGlzLnN1YnNjcmliZVRvRm9ybVN1Ym1pdEV2ZW50KCk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgYEZvcm0gJyR7dGhpcy5yZW5kZXJpbmcucGFyYW1zLkZvcm1JZH0nIHdhcyBub3QgYWJsZSB0byByZW5kZXIgd2l0aCB0aGUgY3VycmVudCByZW5kZXJpbmcgZGF0YWAsXHJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5yZW5kZXJpbmcsIG51bGwsIDIpLFxyXG4gICAgICAgIGVycm9yXHJcbiAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLmhhc0Vycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN1YnNjcmliZXMgdG8gdGhlIGN1c3RvbSBcImZvcm06ZW5nYWdlXCIgZXZlbnQgYW5kIHNlbmRzIGRhdGEgdG8gQ2xvdWRTREsuXHJcbiAgICogVGhpcyBsaXN0ZW5lciBjYXB0dXJlcyBpbnRlcmFjdGlvbnMgc3VjaCBhcyBmb3JtIHZpZXdzIG9yIHN1Ym1pc3Npb25zXHJcbiAgICovXHJcbiAgc3Vic2NyaWJlVG9Gb3JtU3VibWl0RXZlbnQoKSB7XHJcbiAgICBjb25zdCBmb3JtRWxlbWVudCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdmb3JtJyk7XHJcblxyXG4gICAgaWYgKGZvcm1FbGVtZW50KSB7XHJcbiAgICAgIGZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Zvcm06ZW5nYWdlJywgKChcclxuICAgICAgICBlOiBDdXN0b21FdmVudDx7IGZvcm1JZDogc3RyaW5nOyBuYW1lOiAnVklFV0VEJyB8ICdTVUJNSVRURUQnIH0+XHJcbiAgICAgICkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRWRpdGluZykge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeyBmb3JtSWQsIG5hbWUgfSA9IGUuZGV0YWlsO1xyXG5cclxuICAgICAgICBpZiAoZm9ybUlkICYmIG5hbWUpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGBTZW5kaW5nIGZvcm0gZXZlbnQ6ICR7bmFtZX0gZm9yIEZvcm1JZDogJHtmb3JtSWR9YCk7XHJcbiAgICAgICAgICBmb3JtKGZvcm1JZCwgbmFtZSwgdGhpcy5yZW5kZXJpbmcudWlkPy5yZXBsYWNlKC8tL2csICcnKSB8fCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KSBhcyBFdmVudExpc3RlbmVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignTm8gZm9ybSBlbGVtZW50IGZvdW5kIHRvIHN1YnNjcmliZSB0byBzdWJtaXQgZXZlbnQuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXaGVuIHlvdSBzZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhbiBlbGVtZW50LCB0aGUgYnJvd3NlciBkb2VzIG5vdCBleGVjdXRlIGFueSA8c2NyaXB0PiB0YWdzIGluY2x1ZGVkIGluIHRoZSBIVE1MIHN0cmluZ1xyXG4gICAqIFRoaXMgbWV0aG9kIGVuc3VyZXMgdGhhdCBhbnkgPHNjcmlwdD4gZWxlbWVudHMgd2l0aGluIHRoZSBsb2FkZWQgSFRNTCBhcmUgZXhlY3V0ZWQuXHJcbiAgICogSXQgcmUtY3JlYXRlcyB0aGUgc2NyaXB0IGVsZW1lbnRzIGFuZCBhcHBlbmRzIHRoZSB0byB0aGUgY29tcG9uZW50J3MgdGVtcGxhdGUsIHRoZW4gcmVtb3ZlcyBvbGQgc2NyaXB0IGVsZW1lbnRzIHRvIGF2b2lkIGR1cGxpY2F0aW9uLlxyXG4gICAqL1xyXG4gIGV4ZWN1dGVTY3JpcHRFbGVtZW50cygpIHtcclxuICAgIGNvbnN0IHNjcmlwdEVsZW1lbnRzID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpO1xyXG5cclxuICAgIEFycmF5LmZyb20oc2NyaXB0RWxlbWVudHMpLmZvckVhY2goKHNjcmlwdEVsZW1lbnQpID0+IHtcclxuICAgICAgY29uc3QgY2xvbmVkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG5cclxuICAgICAgQXJyYXkuZnJvbShzY3JpcHRFbGVtZW50LmF0dHJpYnV0ZXMpLmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xyXG4gICAgICAgIGNsb25lZEVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lLCBhdHRyaWJ1dGUudmFsdWUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNsb25lZEVsZW1lbnQudGV4dCA9IHNjcmlwdEVsZW1lbnQudGV4dDtcclxuXHJcbiAgICAgIHNjcmlwdEVsZW1lbnQ/LnBhcmVudE5vZGU/LnJlcGxhY2VDaGlsZChjbG9uZWRFbGVtZW50LCBzY3JpcHRFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}