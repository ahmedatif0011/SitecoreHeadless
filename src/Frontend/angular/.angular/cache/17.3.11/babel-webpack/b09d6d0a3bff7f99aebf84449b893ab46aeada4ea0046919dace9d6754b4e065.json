{"ast":null,"code":"import { makeStateKey, TransferState, PLATFORM_ID } from '@angular/core';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { InMemoryCache } from '@apollo/client/core';\nimport { Apollo, ApolloModule } from 'apollo-angular';\nimport { HttpBatchLink } from 'apollo-angular/http';\nimport { isPlatformServer } from '@angular/common';\nimport { environment } from '../environments/environment';\nimport { JssGraphQLService } from './jss-graphql.service';\n/*\n  INTROSPECTION DATA\n  See https://www.apollographql.com/docs/react/recipes/fragment-matching.html\n  This enables the Apollo cache to process fragments on interface types correctly.\n  If this file does not exist, you may need to run the `jss graphql:update` script.\n*/\nimport introspectionQueryResultData from '../graphql-fragment-types';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nimport * as i2 from \"apollo-angular/http\";\n// SSR transfer state key to serialize + rehydrate apollo cache on client side\n// See https://www.apollographql.com/docs/angular/recipes/server-side-rendering.html\nconst STATE_KEY = makeStateKey('apollo.state');\nexport let GraphQLModule = /*#__PURE__*/(() => {\n  class GraphQLModule {\n    apollo;\n    httpLink;\n    transferState;\n    platformId;\n    constructor(apollo, httpLink, transferState, platformId) {\n      this.apollo = apollo;\n      this.httpLink = httpLink;\n      this.transferState = transferState;\n      this.platformId = platformId;\n      this.createApolloClient();\n    }\n    onServer(cache) {\n      this.transferState.onSerialize(STATE_KEY, () => cache.extract());\n    }\n    onBrowser(cache) {\n      const state = this.transferState.get(STATE_KEY, null);\n      cache.restore(state);\n    }\n    createApolloClient() {\n      /*\n        QUERY LINK SELECTION\n        A link is transport which GraphQL queries are pushed across.\n        You have many choices.\n        See the apollo-link documentation for more details.\n      */\n      // set sc_apikey header which is required for any GraphQL calls\n      const sc_apikey = new HttpHeaders().set('sc_apikey', environment.sitecoreApiKey);\n      // choose between a basic HTTP link to run queries...\n      // import { createHttpLink } from 'apollo-angular-link-http';\n      // const link = createHttpLink({ uri: endpoint });\n      // ...or a batched link (multiple queries within 10ms all go in one HTTP request)\n      const batchHttp = this.httpLink.create({\n        uri: environment.graphQLEndpoint,\n        headers: sc_apikey\n      });\n      const possibleTypes = {};\n      introspectionQueryResultData.__schema.types.forEach(supertype => {\n        possibleTypes[supertype.name] = supertype.possibleTypes.map(subtype => subtype.name);\n      });\n      const cache = new InMemoryCache({\n        possibleTypes\n      });\n      this.apollo.create({\n        link: batchHttp,\n        cache,\n        ssrMode: isPlatformServer(this.platformId),\n        ssrForceFetchDelay: 100\n      });\n      const isBrowser = this.transferState.hasKey(STATE_KEY);\n      if (isBrowser) {\n        this.onBrowser(cache);\n      } else {\n        this.onServer(cache);\n      }\n    }\n    static ɵfac = function GraphQLModule_Factory(t) {\n      return new (t || GraphQLModule)(i0.ɵɵinject(i1.Apollo), i0.ɵɵinject(i2.HttpBatchLink), i0.ɵɵinject(i0.TransferState), i0.ɵɵinject(PLATFORM_ID));\n    };\n    static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: GraphQLModule\n    });\n    static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [JssGraphQLService],\n      imports: [ApolloModule, HttpClientModule]\n    });\n  }\n  return GraphQLModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}