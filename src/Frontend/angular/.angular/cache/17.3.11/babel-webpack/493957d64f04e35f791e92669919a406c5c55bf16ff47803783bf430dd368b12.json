{"ast":null,"code":"import _asyncToGenerator from \"D:/JSS-APP/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getBrowserId, getCloudSDKSettingsBrowser as getCloudSDKSettings, getEnabledPackageBrowser as getEnabledPackage, getSettings, handleGetSettingsError } from '@sitecore-cloudsdk/core/internal';\nimport { getCookieValueClientSide } from '@sitecore-cloudsdk/utils';\nimport { ErrorMessages, PACKAGE_NAME } from '../../consts';\nimport { awaitInit } from '../../init/browser/initializer';\nimport { sendEvent } from '../send-event/sendEvent';\nimport { CustomEvent } from './custom-event';\n/**\n * A function that sends a form event to SitecoreCloud API\n *\n * @param formId - The required form ID string\n * @param interactionType - The required interaction type string. Possible values: \"VIEWED\", \"SUBMITTED\"\n * @param componentInstanceId - The required component instance ID string\n * @returns The response object that Sitecore EP returns or null\n */\nexport function form(_x, _x2, _x3) {\n  return _form.apply(this, arguments);\n}\nfunction _form() {\n  _form = _asyncToGenerator(function* (formId, interactionType, componentInstanceId) {\n    yield awaitInit();\n    if (getEnabledPackage(PACKAGE_NAME)?.initState) {\n      const settings = getCloudSDKSettings();\n      const id = getCookieValueClientSide(settings.cookieSettings.name.browserId);\n      const formEvent = new CustomEvent({\n        eventData: {\n          extensionData: {\n            componentInstanceId,\n            formId,\n            interactionType: interactionType.toUpperCase()\n          },\n          type: 'FORM'\n        },\n        id,\n        sendEvent,\n        settings: settings\n      });\n      formEvent.page = undefined;\n      return formEvent.send();\n    } else {\n      const settings = handleGetSettingsError(getSettings, ErrorMessages.IE_0014);\n      const id = getBrowserId();\n      const formEvent = new CustomEvent({\n        eventData: {\n          extensionData: {\n            componentInstanceId,\n            formId,\n            interactionType: interactionType.toUpperCase()\n          },\n          type: 'FORM'\n        },\n        id,\n        sendEvent,\n        settings\n      });\n      formEvent.page = undefined;\n      return formEvent.send();\n    }\n  });\n  return _form.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}