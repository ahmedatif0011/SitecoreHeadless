{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestLayoutService = void 0;\nconst layout_service_1 = require(\"./layout-service\");\nconst axios_fetcher_1 = require(\"../axios-fetcher\");\nconst data_fetcher_1 = require(\"../data-fetcher\");\nconst debug_1 = __importDefault(require(\"../debug\"));\n/**\n * Fetch layout data using the Sitecore Layout Service REST API.\n * Uses Axios as the default data fetcher (@see AxiosDataFetcher).\n * @augments LayoutServiceBase\n */\nclass RestLayoutService extends layout_service_1.LayoutServiceBase {\n  constructor(serviceConfig) {\n    super();\n    this.serviceConfig = serviceConfig;\n    /**\n     * Provides fetch options in order to fetch data\n     * @param {string} [language] language will be applied to `sc_lang` param\n     * @returns {FetchOptions} fetch options\n     */\n    this.getFetchParams = language => {\n      var _a;\n      return {\n        sc_apikey: this.serviceConfig.apiKey,\n        sc_site: this.serviceConfig.siteName,\n        sc_lang: language || '',\n        tracking: (_a = this.serviceConfig.tracking) !== null && _a !== void 0 ? _a : true\n      };\n    };\n    /**\n     * Provides default @see AxiosDataFetcher data fetcher\n     * @param {IncomingMessage} [req] Request instance\n     * @param {ServerResponse} [res] Response instance\n     * @returns default fetcher\n     */\n    this.getDefaultFetcher = (req, res) => {\n      const config = {\n        debugger: debug_1.default.layout\n      };\n      if (req && res) {\n        config.onReq = this.setupReqHeaders(req);\n        config.onRes = this.setupResHeaders(res);\n      }\n      const axiosFetcher = new axios_fetcher_1.AxiosDataFetcher(config);\n      const fetcher = (url, data) => {\n        return axiosFetcher.fetch(url, data);\n      };\n      return fetcher;\n    };\n  }\n  /**\n   * Fetch layout data for an item.\n   * @param {string} itemPath item path to fetch layout data for.\n   * @param {string} [language] the language to fetch layout data for.\n   * @param {IncomingMessage} [req] Request instance\n   * @param {ServerResponse} [res] Response instance\n   * @returns {Promise<LayoutServiceData>} layout service data\n   * @throws {Error} the item with the specified path is not found\n   */\n  fetchLayoutData(itemPath, language, req, res) {\n    const querystringParams = this.getFetchParams(language);\n    debug_1.default.layout('fetching layout data for %s %s %s', itemPath, language, this.serviceConfig.siteName);\n    const fetcher = this.serviceConfig.dataFetcherResolver ? this.serviceConfig.dataFetcherResolver(req, res) : this.getDefaultFetcher(req, res);\n    const fetchUrl = this.resolveLayoutServiceUrl('render');\n    return (0, data_fetcher_1.fetchData)(fetchUrl, fetcher, Object.assign({\n      item: itemPath\n    }, querystringParams)).catch(error => {\n      var _a;\n      if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {\n        // Aligned with response of GraphQL Layout Service in case if layout is not found.\n        // When 404 Rest Layout Service returns\n        // {\n        //   sitecore: {\n        //     context: {\n        //       pageEditing: false,\n        //       language\n        //     },\n        //     route: null\n        //   },\n        // }\n        //\n        return error.response.data;\n      }\n      throw error;\n    });\n  }\n  /**\n   * Fetch layout data for a particular placeholder.\n   * Makes a request to Sitecore Layout Service for the specified placeholder in\n   * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.\n   * @param {string} placeholderName the name of the placeholder to fetch layout data for.\n   * @param {string} itemPath the path to the item to fetch layout data for.\n   * @param {string} [language] the language to fetch data for.\n   * @param {IncomingMessage} [req] Request instance\n   * @param {ServerResponse} [res] Response instance\n   * @returns {Promise<PlaceholderData>} placeholder data\n   */\n  fetchPlaceholderData(placeholderName, itemPath, language, req, res) {\n    const querystringParams = this.getFetchParams(language);\n    debug_1.default.layout('fetching placeholder data for %s %s %s %s', placeholderName, itemPath, language, this.serviceConfig.siteName);\n    const fetcher = this.serviceConfig.dataFetcherResolver ? this.serviceConfig.dataFetcherResolver(req, res) : this.getDefaultFetcher(req, res);\n    const fetchUrl = this.resolveLayoutServiceUrl('placeholder');\n    return (0, data_fetcher_1.fetchData)(fetchUrl, fetcher, Object.assign({\n      placeholderName,\n      item: itemPath\n    }, querystringParams));\n  }\n  /**\n   * Resolves layout service url\n   * @param {string} apiType which layout service API to call ('render' or 'placeholder')\n   * @returns the layout service url\n   */\n  resolveLayoutServiceUrl(apiType) {\n    const {\n      apiHost = '',\n      configurationName = 'jss'\n    } = this.serviceConfig;\n    return `${apiHost}/sitecore/api/layout/${apiType}/${configurationName}`;\n  }\n  /**\n   * Setup request headers\n   * @param {IncomingMessage} req Request instance\n   * @returns {AxiosRequestConfig} axios request config\n   */\n  setupReqHeaders(req) {\n    return reqConfig => {\n      debug_1.default.layout('performing request header passing');\n      reqConfig.headers.common = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, reqConfig.headers.common), req.headers.cookie && {\n        cookie: req.headers.cookie\n      }), req.headers.referer && {\n        referer: req.headers.referer\n      }), req.headers['user-agent'] && {\n        'user-agent': req.headers['user-agent']\n      }), req.connection.remoteAddress && {\n        'X-Forwarded-For': req.connection.remoteAddress\n      });\n      return reqConfig;\n    };\n  }\n  /**\n   * Setup response headers based on response from layout service\n   * @param {ServerResponse} res Response instance\n   * @returns {AxiosResponse} response\n   */\n  setupResHeaders(res) {\n    return serverRes => {\n      debug_1.default.layout('performing response header passing');\n      serverRes.headers['set-cookie'] && res.setHeader('set-cookie', serverRes.headers['set-cookie']);\n      return serverRes;\n    };\n  }\n}\nexports.RestLayoutService = RestLayoutService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}