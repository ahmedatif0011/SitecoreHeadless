{"ast":null,"code":"import { from as fromPromise, throwError as observableThrow } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { layoutServiceFactory } from '../lib/layout-service-factory';\nimport * as i0 from \"@angular/core\";\nexport class LayoutServiceError {\n  status;\n  statusText;\n  data;\n}\nconst layoutServiceInstance = layoutServiceFactory.create();\nexport let JssLayoutService = /*#__PURE__*/(() => {\n  class JssLayoutService {\n    getRouteData(route, language) {\n      return fromPromise(layoutServiceInstance.fetchLayoutData(route, language)).pipe(map(routeData => {\n        if (!routeData.sitecore.route) {\n          // A missing route value signifies an invalid path, so simulate Not Found error\n          const error = new LayoutServiceError();\n          error.status = 404;\n          error.statusText = 'Not Found';\n          error.data = routeData;\n          throw error;\n        }\n        return routeData;\n      }), catchError(this.getLayoutServiceError));\n    }\n    getLayoutServiceError(error) {\n      if (error instanceof LayoutServiceError) {\n        return observableThrow(() => error);\n      }\n      const layoutServiceError = new LayoutServiceError();\n      const response = error.response;\n      if (response) {\n        layoutServiceError.status = response.status;\n        layoutServiceError.statusText = response.statusText;\n        layoutServiceError.data = response.data;\n      }\n      return observableThrow(() => layoutServiceError);\n    }\n    static ɵfac = function JssLayoutService_Factory(t) {\n      return new (t || JssLayoutService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JssLayoutService,\n      factory: JssLayoutService.ɵfac\n    });\n  }\n  return JssLayoutService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}