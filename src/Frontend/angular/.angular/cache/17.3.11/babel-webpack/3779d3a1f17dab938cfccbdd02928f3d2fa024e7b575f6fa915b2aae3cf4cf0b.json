{"ast":null,"code":"import { createNgModule, Inject, Injectable } from '@angular/core';\nimport { DYNAMIC_COMPONENT, PLACEHOLDER_COMPONENTS, PLACEHOLDER_LAZY_COMPONENTS } from './placeholder.token';\nimport { RawComponent } from '../components/raw.component';\nimport { isRawRendering } from '../components/rendering';\nimport * as i0 from \"@angular/core\";\nexport let JssComponentFactoryService = /*#__PURE__*/(() => {\n  class JssComponentFactoryService {\n    injector;\n    components;\n    lazyComponents;\n    componentMap;\n    lazyComponentMap;\n    constructor(injector, components, lazyComponents) {\n      this.injector = injector;\n      this.components = components;\n      this.lazyComponents = lazyComponents;\n      this.componentMap = new Map();\n      this.lazyComponentMap = new Map();\n      this.components.forEach(c => this.componentMap.set(c.name, c));\n      if (this.lazyComponents) {\n        this.lazyComponents.forEach(c => this.lazyComponentMap.set(c.path, c));\n      }\n    }\n    getComponent(component) {\n      const loadedComponent = this.componentMap.get(component.componentName);\n      if (loadedComponent) {\n        return Promise.resolve({\n          componentDefinition: this.applySXAParams(component),\n          componentImplementation: loadedComponent.type,\n          canActivate: loadedComponent.canActivate,\n          resolve: loadedComponent.resolve\n        });\n      }\n      const lazyComponent = this.lazyComponentMap.get(component.componentName);\n      if (lazyComponent) {\n        return lazyComponent.loadChildren().then(lazyChild => {\n          let componentType = null;\n          const moduleRef = createNgModule(lazyChild, this.injector);\n          const dynamicComponentType = moduleRef.injector.get(DYNAMIC_COMPONENT);\n          if (!dynamicComponentType) {\n            throw new Error(`JssComponentFactoryService: Lazy load module for component \"${lazyComponent.path}\" missing DYNAMIC_COMPONENT provider. Missing JssModule.forChild()?`);\n          }\n          if (component.componentName in dynamicComponentType) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            componentType = dynamicComponentType[component.componentName];\n          } else {\n            if (typeof dynamicComponentType === 'function') {\n              componentType = dynamicComponentType;\n            } else {\n              throw new Error(`JssComponentFactoryService: Lazy load module for component \"${lazyComponent.path}\" missing DYNAMIC_COMPONENT provider. Missing JssModule.forChild()?`);\n            }\n          }\n          return {\n            componentDefinition: this.applySXAParams(component),\n            componentImplementation: componentType,\n            componentModuleRef: moduleRef,\n            canActivate: lazyComponent.canActivate,\n            resolve: lazyComponent.resolve\n          };\n        });\n      }\n      return Promise.resolve({\n        componentDefinition: component\n      });\n    }\n    getComponents(components) {\n      // acquire all components and keep them in order while handling their potential async-ness\n      return Promise.all(components.map(component => isRawRendering(component) ? this.getRawComponent(component) : this.getComponent(component)));\n    }\n    getRawComponent(component) {\n      return Promise.resolve({\n        componentImplementation: RawComponent,\n        componentDefinition: component\n      });\n    }\n    applySXAParams(rendering) {\n      // Provide aggregated SXA styles on params 'styles'\n      const styles = [];\n      if (rendering.params?.GridParameters) {\n        styles.push(rendering.params.GridParameters.trim());\n      }\n      if (rendering.params?.Styles) {\n        styles.push(rendering.params.Styles.trim());\n      }\n      if (rendering.params && styles.length > 0) {\n        rendering.params.styles = styles.join(' ');\n      }\n      return rendering;\n    }\n    static ɵfac = function JssComponentFactoryService_Factory(t) {\n      return new (t || JssComponentFactoryService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(PLACEHOLDER_COMPONENTS), i0.ɵɵinject(PLACEHOLDER_LAZY_COMPONENTS));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: JssComponentFactoryService,\n      factory: JssComponentFactoryService.ɵfac\n    });\n  }\n  return JssComponentFactoryService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}