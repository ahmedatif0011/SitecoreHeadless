{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JssLayoutService = exports.LayoutServiceError = void 0;\nconst tslib_1 = require(\"tslib\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst layout_service_factory_1 = require(\"../lib/layout-service-factory\");\nconst i0 = tslib_1.__importStar(require(\"@angular/core\"));\nclass LayoutServiceError {\n  status;\n  statusText;\n  data;\n}\nexports.LayoutServiceError = LayoutServiceError;\nconst layoutServiceInstance = layout_service_factory_1.layoutServiceFactory.create();\nlet JssLayoutService = /*#__PURE__*/(() => {\n  class JssLayoutService {\n    getRouteData(route, language) {\n      return (0, rxjs_1.from)(layoutServiceInstance.fetchLayoutData(route, language)).pipe((0, operators_1.map)(routeData => {\n        if (!routeData.sitecore.route) {\n          // A missing route value signifies an invalid path, so simulate Not Found error\n          const error = new LayoutServiceError();\n          error.status = 404;\n          error.statusText = 'Not Found';\n          error.data = routeData;\n          throw error;\n        }\n        return routeData;\n      }), (0, operators_1.catchError)(this.getLayoutServiceError));\n    }\n    getLayoutServiceError(error) {\n      if (error instanceof LayoutServiceError) {\n        return (0, rxjs_1.throwError)(() => error);\n      }\n      const layoutServiceError = new LayoutServiceError();\n      const response = error.response;\n      if (response) {\n        layoutServiceError.status = response.status;\n        layoutServiceError.statusText = response.statusText;\n        layoutServiceError.data = response.data;\n      }\n      return (0, rxjs_1.throwError)(() => layoutServiceError);\n    }\n    static ɵfac = function JssLayoutService_Factory(t) {\n      return new (t || JssLayoutService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JssLayoutService,\n      factory: JssLayoutService.ɵfac\n    });\n  }\n  return JssLayoutService;\n})();\nexports.JssLayoutService = JssLayoutService;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}