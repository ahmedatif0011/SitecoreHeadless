{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStylesheetUrl = void 0;\nexports.getComponentLibraryStylesheetLinks = getComponentLibraryStylesheetLinks;\nconst _1 = require(\".\");\nconst constants_1 = require(\"../constants\");\n/**\n * Pattern for library ids\n * @example -library--foo\n */\nconst STYLES_LIBRARY_ID_REGEX = /-library--([^\\s]+)/;\n/**\n * Walks through rendering tree and returns list of links of all FEAAS, BYOC or SXA Component Library Stylesheets that are used\n * @param {LayoutServiceData} layoutData Layout service data\n * @param {string} sitecoreEdgeContextId Sitecore Edge Context ID\n * @param {string} [sitecoreEdgeUrl] Sitecore Edge Platform URL. Default is https://edge-platform.sitecorecloud.io\n * @returns {HTMLLink[]} library stylesheet links\n */\nfunction getComponentLibraryStylesheetLinks(layoutData, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) {\n  const ids = new Set();\n  if (!layoutData.sitecore.route) return [];\n  traverseComponent(layoutData.sitecore.route, ids);\n  return [...ids].map(id => ({\n    href: (0, exports.getStylesheetUrl)(id, sitecoreEdgeContextId, sitecoreEdgeUrl),\n    rel: 'stylesheet'\n  }));\n}\nconst getStylesheetUrl = (id, sitecoreEdgeContextId, sitecoreEdgeUrl = constants_1.SITECORE_EDGE_URL_DEFAULT) => {\n  return `${sitecoreEdgeUrl}/v1/files/components/styles/${id}.css?sitecoreContextId=${sitecoreEdgeContextId}`;\n};\nexports.getStylesheetUrl = getStylesheetUrl;\n/**\n * Traverse placeholder and components to add library ids\n * @param {Array<ComponentRendering | HtmlElementRendering>} components\n * @param {Set<string>} ids library ids\n */\nconst traversePlaceholder = (components, ids) => {\n  components.map(component => {\n    const rendering = component;\n    return traverseComponent(rendering, ids);\n  });\n};\n/**\n * Traverse component and children to add library ids\n * @param {RouteData | ComponentRendering | HtmlElementRendering} component component data\n * @param {Set<string>} ids library ids\n */\nconst traverseComponent = (component, ids) => {\n  var _a, _b, _c, _d, _e, _f, _g;\n  let libraryId = undefined;\n  if ('params' in component && component.params) {\n    // LibraryID in css class name takes precedence over LibraryId attribute\n    libraryId = ((_b = (_a = component.params.CSSStyles) === null || _a === void 0 ? void 0 : _a.match(STYLES_LIBRARY_ID_REGEX)) === null || _b === void 0 ? void 0 : _b[1]) || ((_d = (_c = component.params.Styles) === null || _c === void 0 ? void 0 : _c.match(STYLES_LIBRARY_ID_REGEX)) === null || _d === void 0 ? void 0 : _d[1]) || component.params.LibraryId || undefined;\n  }\n  // if params are empty we try to fall back to data source or attributes\n  if (!libraryId && 'fields' in component && component.fields) {\n    libraryId = ((_e = (0, _1.getFieldValue)(component.fields, 'CSSStyles', '').match(STYLES_LIBRARY_ID_REGEX)) === null || _e === void 0 ? void 0 : _e[1]) || ((_f = (0, _1.getFieldValue)(component.fields, 'Styles', '').match(STYLES_LIBRARY_ID_REGEX)) === null || _f === void 0 ? void 0 : _f[1]) || (0, _1.getFieldValue)(component.fields, 'LibraryId', '') || undefined;\n  }\n  // HTMLRendering its class attribute\n  if (!libraryId && 'attributes' in component && typeof component.attributes.class === 'string') {\n    libraryId = (_g = component.attributes.class.match(STYLES_LIBRARY_ID_REGEX)) === null || _g === void 0 ? void 0 : _g[1];\n  }\n  if (libraryId) {\n    ids.add(libraryId);\n  }\n  const placeholders = component.placeholders || {};\n  Object.keys(placeholders).forEach(placeholder => {\n    traversePlaceholder(placeholders[placeholder], ids);\n  });\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}