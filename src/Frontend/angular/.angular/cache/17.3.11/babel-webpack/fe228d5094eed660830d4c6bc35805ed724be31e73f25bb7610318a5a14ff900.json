{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    http;\n    constructor(http) {\n      this.http = http;\n    }\n    Get(URLBase, url, headersObj, paramsObj) {\n      URLBase = URLBase == null ? environment.sitecoreApiHost : URLBase;\n      const cleanedHeaders = headersObj ? this.removeEmptyProperties(headersObj) : undefined;\n      const cleanedParams = paramsObj ? this.removeEmptyProperties(paramsObj) : undefined;\n      const options = {\n        headers: cleanedHeaders,\n        params: cleanedParams\n      };\n      return this.http.get(URLBase + url, options);\n    }\n    POST(URLBase, url, body, headersObj, paramsObj, isFormData = false) {\n      let headers = new HttpHeaders();\n      let params = new HttpParams();\n      URLBase = URLBase == null ? environment.sitecoreApiHost : URLBase;\n      // If headersObj is provided and not null, add each header to HttpHeaders\n      if (headersObj) {\n        for (let key in headersObj) {\n          if (headersObj.hasOwnProperty(key)) {\n            headers = headers.set(key, headersObj[key]);\n          }\n        }\n      }\n      // If paramsObj is provided and not null, add each param to HttpParams\n      if (paramsObj) {\n        for (let key in paramsObj) {\n          if (paramsObj.hasOwnProperty(key)) {\n            params = params.set(key, paramsObj[key]);\n          }\n        }\n      }\n      // Convert body to FormData if isFormData is true\n      let payload = body;\n      if (isFormData && body) {\n        payload = new FormData();\n        for (let key in body) {\n          if (body.hasOwnProperty(key)) {\n            payload.append(key, body[key]);\n          }\n        }\n      }\n      const cleanedHeaders = headersObj ? this.removeEmptyProperties(headersObj) : undefined;\n      const cleanedParams = paramsObj ? this.removeEmptyProperties(paramsObj) : undefined;\n      // Build options object conditionally\n      const options = {\n        headers: cleanedHeaders,\n        params: cleanedParams\n      };\n      return this.http.post(URLBase + url, payload, options);\n    }\n    PUT(URLBase, url, body, headersObj, paramsObj, isFormData = false) {\n      let headers = new HttpHeaders();\n      let params = new HttpParams();\n      URLBase = URLBase == null ? environment.sitecoreApiHost : URLBase;\n      // If headersObj is provided and not null, add each header to HttpHeaders\n      if (headersObj) {\n        for (let key in headersObj) {\n          if (headersObj.hasOwnProperty(key)) {\n            headers = headers.set(key, headersObj[key]);\n          }\n        }\n      }\n      // If paramsObj is provided and not null, add each param to HttpParams\n      if (paramsObj) {\n        for (let key in paramsObj) {\n          if (paramsObj.hasOwnProperty(key)) {\n            params = params.set(key, paramsObj[key]);\n          }\n        }\n      }\n      // Convert body to FormData if isFormData is true\n      let payload = body;\n      if (isFormData && body) {\n        payload = new FormData();\n        for (let key in body) {\n          if (body.hasOwnProperty(key)) {\n            payload.append(key, body[key]);\n          }\n        }\n      }\n      const cleanedHeaders = headersObj ? this.removeEmptyProperties(headersObj) : undefined;\n      const cleanedParams = paramsObj ? this.removeEmptyProperties(paramsObj) : undefined;\n      // Build options object conditionally\n      const options = {\n        headers: cleanedHeaders,\n        params: cleanedParams\n      };\n      // Make the PUT request and return an Observable of ApiResponse<T>\n      return this.http.put(URLBase + url, payload, options);\n    }\n    DELETE(URLBase, url, headersObj, paramsObj) {\n      let headers = new HttpHeaders();\n      let params = new HttpParams();\n      URLBase = URLBase == null ? environment.sitecoreApiHost : URLBase;\n      // If headersObj is provided and not null, add each header to HttpHeaders\n      if (headersObj) {\n        for (let key in headersObj) {\n          if (headersObj.hasOwnProperty(key)) {\n            headers = headers.set(key, headersObj[key]);\n          }\n        }\n      }\n      // If paramsObj is provided and not null, add each param to HttpParams\n      if (paramsObj) {\n        for (let key in paramsObj) {\n          if (paramsObj.hasOwnProperty(key)) {\n            params = params.set(key, paramsObj[key]);\n          }\n        }\n      }\n      const cleanedHeaders = headersObj ? this.removeEmptyProperties(headersObj) : undefined;\n      const cleanedParams = paramsObj ? this.removeEmptyProperties(paramsObj) : undefined;\n      // Build options object conditionally\n      const options = {\n        headers: cleanedHeaders,\n        params: cleanedParams\n      };\n      // Make the DELETE request and return an Observable of ApiResponse<T>\n      return this.http.delete(URLBase + url, options);\n    }\n    removeEmptyProperties(obj) {\n      const result = {};\n      // Iterate over the keys of the object\n      for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null && obj[key] !== '') {\n          // Type assertion to ensure we're only adding non-undefined values\n          result[key] = obj[key];\n        }\n      }\n      return result;\n    }\n    static ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}