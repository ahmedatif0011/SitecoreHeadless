{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkStatus = checkStatus;\nexports.trackEvent = trackEvent;\nconst utils_1 = require(\"./../utils\");\nclass ResponseError extends Error {\n  constructor(message, response) {\n    super(message);\n    Object.setPrototypeOf(this, ResponseError.prototype);\n    this.response = response;\n  }\n}\n/**\n * @param {HttpResponse<T>} response response from fetch\n * @returns {HttpResponse<T>} response\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new ResponseError(response.statusText, response);\n  throw error;\n}\n/**\n * Note: axios needs to use `withCredentials: true` in order for Sitecore cookies to be included in CORS requests\n * which is necessary for analytics and such\n * @param {string} url url to fetch\n * @param {unknown[]} data data to send\n * @param {HttpDataFetcher<T>} fetcher data fetcher\n * @param {querystring.ParsedUrlQueryInput} params additional params to send\n */\nfunction fetchData(url, data, fetcher, params = {}) {\n  return fetcher((0, utils_1.resolveUrl)(url, params), data).then(checkStatus).then(response => {\n    // axios auto-parses JSON responses, don't need to JSON.parse\n    return response.data;\n  });\n}\n/**\n * Resolve tracking endpoint url\n * @param {TrackingRequestOptions} options options for the tracking service\n * @returns {string} tracking api url\n */\nfunction resolveTrackingUrl(options) {\n  const {\n    host = '',\n    serviceUrl = '/sitecore/api/jss/track',\n    action = 'event'\n  } = options;\n  return `${host}${serviceUrl}/${action}`;\n}\n/**\n * Makes a request to Sitecore Layout Service for the specified route item path.\n * @param {Array<EventInstance | GoalInstance | OutcomeInstance | CampaignInstance | PageViewInstance>} events events to send\n * @param {TrackingRequestOptions} options options for the tracking service\n * @returns {Promise<void>} void\n */\nfunction trackEvent(events, options) {\n  const {\n    querystringParams\n  } = options;\n  if (!options.test && (0, utils_1.isServer)()) {\n    // do nothing for SSR, only track events when a browser requests it\n    return Promise.resolve();\n  }\n  if (!Array.isArray(events)) {\n    events = [events];\n  }\n  const fetchUrl = resolveTrackingUrl(options);\n  return fetchData(fetchUrl, events, options.fetcher, querystringParams);\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}