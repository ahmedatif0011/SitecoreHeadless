{"ast":null,"code":"import { Directive, Input } from '@angular/core';\nimport { mediaApi } from '@sitecore-jss/sitecore-jss/media';\nimport { BaseFieldDirective } from './base-field.directive';\nimport { DefaultEmptyImageFieldEditingComponent } from './default-empty-image-field-editing-placeholder.component';\nimport { MetadataKind } from '@sitecore-jss/sitecore-jss/editing';\nimport * as i0 from \"@angular/core\";\nexport let ImageDirective = /*#__PURE__*/(() => {\n  class ImageDirective extends BaseFieldDirective {\n    templateRef;\n    renderer;\n    elementRef;\n    field;\n    editable = true;\n    /**\n     * Custom regexp that finds media URL prefix that will be replaced by `/-/jssmedia` or `/~/jssmedia`.\n     * @example\n     * /\\/([-~]{1})assets\\//i\n     * /-assets/website -> /-/jssmedia/website\n     * /~assets/website -> /~/jssmedia/website\n     */\n    mediaUrlPrefix;\n    urlParams = {};\n    attrs = {};\n    /**\n     * Custom template to render in Pages in Metadata edit mode if field value is empty\n     */\n    emptyFieldEditingTemplate;\n    /**\n     * Default component to render in Pages in Metadata edit mode if field value is empty and emptyFieldEditingTemplate is not provided\n     */\n    defaultFieldEditingComponent;\n    inlineRef = null;\n    constructor(viewContainer, templateRef, renderer, elementRef) {\n      super(viewContainer);\n      this.templateRef = templateRef;\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.defaultFieldEditingComponent = DefaultEmptyImageFieldEditingComponent;\n    }\n    ngOnChanges(changes) {\n      if (changes.field || changes.editable || changes.urlParams || changes.attrs) {\n        this.viewContainer.clear();\n        if (this.inlineRef) {\n          this.inlineRef.remove();\n          this.inlineRef = null;\n        }\n        this.updateView();\n      }\n    }\n    updateView() {\n      if (!this.shouldRender()) {\n        super.renderEmpty();\n        return;\n      }\n      const overrideAttrs = {\n        ...this.getElementAttrs(),\n        ...this.attrs\n      };\n      const media = this.field;\n      let attrs = {};\n      // we likely have an experience editor value, should be a string\n      if (this.editable && media.editable) {\n        const foundImg = mediaApi.findEditorImageTag(media.editable);\n        if (!foundImg) {\n          return this.renderInlineWrapper(media.editable);\n        }\n        attrs = this.getImageAttrs(foundImg.attrs, overrideAttrs, this.urlParams);\n        if (!attrs) {\n          return this.renderInlineWrapper(media.editable);\n        }\n        const tempImg = this.renderer.createElement('img');\n        Object.entries(attrs).forEach(([key, attrValue]) => tempImg.setAttribute(key, attrValue));\n        const editableMarkup = media.editable.replace(foundImg.imgTag, tempImg.outerHTML);\n        return this.renderInlineWrapper(editableMarkup);\n      }\n      // some wise-guy/gal is passing in a 'raw' image object value\n      const img = media.src ? media : media.value;\n      if (!img) {\n        return null;\n      }\n      attrs = this.getImageAttrs(img, overrideAttrs, this.urlParams);\n      if (attrs) {\n        this.renderMetadata(MetadataKind.Open);\n        this.renderTemplate(attrs);\n        this.renderMetadata(MetadataKind.Close);\n      }\n    }\n    getImageAttrs(fieldAttrs, parsedAttrs, imageParams) {\n      const combinedAttrs = {\n        ...fieldAttrs,\n        ...parsedAttrs\n      };\n      // eslint-disable-next-line prefer-const\n      let {\n        src,\n        srcSet,\n        style,\n        ...otherAttrs\n      } = combinedAttrs;\n      if (!src) {\n        return null;\n      }\n      const newAttrs = {\n        ...otherAttrs\n      };\n      // update image URL for jss handler and image rendering params\n      src = mediaApi.updateImageUrl(src, imageParams, this.mediaUrlPrefix);\n      if (srcSet) {\n        // replace with HTML-formatted srcset, including updated image URLs\n        newAttrs.srcSet = mediaApi.getSrcSet(src, srcSet, imageParams, this.mediaUrlPrefix);\n      } else {\n        newAttrs.src = src;\n      }\n      if (style) {\n        newAttrs.style = Object.entries(style).map(([propName, value]) => `${propName}:${value}`).join(';');\n      }\n      return newAttrs;\n    }\n    renderTemplate(imageProps) {\n      const viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n      viewRef.rootNodes.forEach(node => {\n        Object.entries(imageProps).forEach(([key, imgPropVal]) => this.renderer.setAttribute(node, key, imgPropVal));\n      });\n    }\n    getElementAttrs() {\n      const view = this.templateRef.createEmbeddedView(null);\n      const element = view.rootNodes[0];\n      if (!element) {\n        view.destroy();\n        return {};\n      }\n      const attrs = {};\n      for (let i = 0; i < element.attributes.length; i++) {\n        const attr = element.attributes.item(i);\n        if (attr) {\n          attrs[attr.name] = attr.value;\n        }\n      }\n      view.destroy();\n      return attrs;\n    }\n    renderInlineWrapper(editable) {\n      const span = this.renderer.createElement('span');\n      span.className = 'sc-image-wrapper';\n      span.innerHTML = editable;\n      const parentNode = this.renderer.parentNode(this.elementRef.nativeElement);\n      this.renderer.insertBefore(parentNode, span, this.elementRef.nativeElement);\n      parentNode.removeChild(this.elementRef.nativeElement);\n      this.inlineRef = span;\n    }\n    static ɵfac = function ImageDirective_Factory(t) {\n      return new (t || ImageDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: ImageDirective,\n      selectors: [[\"\", \"scImage\", \"\"]],\n      inputs: {\n        field: [i0.ɵɵInputFlags.None, \"scImage\", \"field\"],\n        editable: [i0.ɵɵInputFlags.None, \"scImageEditable\", \"editable\"],\n        mediaUrlPrefix: [i0.ɵɵInputFlags.None, \"scImageMediaUrlPrefix\", \"mediaUrlPrefix\"],\n        urlParams: [i0.ɵɵInputFlags.None, \"scImageUrlParams\", \"urlParams\"],\n        attrs: [i0.ɵɵInputFlags.None, \"scImageAttrs\", \"attrs\"],\n        emptyFieldEditingTemplate: [i0.ɵɵInputFlags.None, \"scImageEmptyFieldEditingTemplate\", \"emptyFieldEditingTemplate\"]\n      },\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return ImageDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}