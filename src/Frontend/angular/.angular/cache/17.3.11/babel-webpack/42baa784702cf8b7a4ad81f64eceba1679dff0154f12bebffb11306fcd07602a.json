{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DictionaryServiceBase = void 0;\nconst cache_client_1 = require(\"../cache-client\");\n/**\n * Base implementation of @see DictionaryService that handles caching dictionary values\n */\nclass DictionaryServiceBase {\n  /**\n   * Initializes a new instance of @see DictionaryService using the provided @see CacheOptions\n   * @param {CacheOptions} options Configuration options\n   */\n  constructor(options) {\n    this.options = options;\n    this.cache = this.getCacheClient();\n  }\n  /**\n   * Caches a @see DictionaryPhrases value for the specified cache key.\n   * @param {string} key The cache key.\n   * @param {DictionaryPhrases} value The value to cache.\n   * @returns The value added to the cache.\n   * @mixes CacheClient<DictionaryPhrases>\n   */\n  setCacheValue(key, value) {\n    return this.cache.setCacheValue(key, value);\n  }\n  /**\n   * Retrieves a @see DictionaryPhrases value from the cache.\n   * @param {string} key The cache key.\n   * @returns The @see DictionaryPhrases value, or null if the specified key is not found in the cache.\n   */\n  getCacheValue(key) {\n    return this.cache.getCacheValue(key);\n  }\n  /**\n   * Gets a cache client that can cache data. Uses memory-cache as the default\n   * library for caching (@see MemoryCacheClient). Override this method if you\n   * want to use something else.\n   * @returns {CacheClient} implementation\n   */\n  getCacheClient() {\n    return new cache_client_1.MemoryCacheClient(this.options);\n  }\n}\nexports.DictionaryServiceBase = DictionaryServiceBase;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}