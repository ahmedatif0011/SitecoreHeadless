{"ast":null,"code":"import { CommonModule, DatePipe } from '@angular/common';\nimport { Injector, NgModule } from '@angular/core';\nimport { ActivatedRoute, Router, ROUTES } from '@angular/router';\nimport { dataResolverFactory } from './services/data-resolver-factory';\nimport { DateDirective } from './components/date.directive';\nimport { FileDirective } from './components/file.directive';\nimport { GenericLinkDirective } from './components/generic-link.directive';\nimport { guardResolverFactory } from './services/guard-resolver-factory';\nimport { ImageDirective } from './components/image.directive';\nimport { LinkDirective } from './components/link.directive';\nimport { MissingComponentComponent } from './components/missing-component.component';\nimport { HiddenRenderingComponent } from './components/hidden-rendering.component';\nimport { PlaceholderLoadingDirective } from './components/placeholder-loading.directive';\nimport { PlaceholderComponent } from './components/placeholder.component';\nimport { EditFrameComponent } from './components/editframe.component';\nimport { DATA_RESOLVER, DYNAMIC_COMPONENT, GUARD_RESOLVER, PLACEHOLDER_COMPONENTS, PLACEHOLDER_LAZY_COMPONENTS, PLACEHOLDER_MISSING_COMPONENT_COMPONENT, PLACEHOLDER_HIDDEN_RENDERING_COMPONENT } from './services/placeholder.token';\nimport { RawComponent } from './components/raw.component';\nimport { RenderComponentComponent } from './components/render-component.component';\nimport { RenderEachDirective } from './components/render-each.directive';\nimport { RenderEmptyDirective } from './components/render-empty.directive';\nimport { RichTextDirective } from './components/rich-text.directive';\nimport { RouterLinkDirective } from './components/router-link.directive';\nimport { TextDirective } from './components/text.directive';\nimport { JssComponentFactoryService } from './services/jss-component-factory.service';\nimport { JssStateService } from './services/jss-state.service';\nimport { EditingScriptsComponent } from './components/editing-scripts.component';\nimport { FormComponent } from './components/form.component';\nimport * as i0 from \"@angular/core\";\nexport let JssModule = /*#__PURE__*/(() => {\n  class JssModule {\n    /**\n     * Instantiates the JSS module with no component factory.\n     * Useful for using it from libraries. Most of the time you'd want withComponents()\n     * @returns {ModuleWithProviders<JssModule>} module\n     */\n    static forRoot() {\n      return {\n        ngModule: JssModule,\n        providers: [DatePipe, JssStateService, JssComponentFactoryService, {\n          provide: GUARD_RESOLVER,\n          useFactory: guardResolverFactory,\n          deps: [Injector, ActivatedRoute, Router]\n        }, {\n          provide: DATA_RESOLVER,\n          useFactory: dataResolverFactory,\n          deps: [Injector, ActivatedRoute, Router]\n        }]\n      };\n    }\n    /**\n     * Instantiates a module for a lazy-loaded JSS component(s)\n     * @param {Type<unknown> | Record<string, Type<unknown>> } value - component or map of components\n     * @returns {ModuleWithProviders<JssModule>} module\n     */\n    static forChild(value) {\n      return {\n        ngModule: JssModule,\n        providers: [{\n          provide: ROUTES,\n          useValue: [],\n          multi: true\n        }, {\n          provide: DYNAMIC_COMPONENT,\n          useValue: value\n        }]\n      };\n    }\n    /**\n     * Instantiates the JSS module and specifies the mapping from component name to component implementation.\n     * Appropriate when defining the set of JSS components that your app is aware of.\n     * @param {ComponentNameAndType[]} components\n     * @param {ComponentNameAndModule[]} [lazyComponents]\n     * @returns {ModuleWithProviders<JssModule>} module\n     */\n    static withComponents(components, lazyComponents) {\n      return {\n        ngModule: JssModule,\n        providers: [{\n          provide: PLACEHOLDER_COMPONENTS,\n          useValue: components\n        }, {\n          provide: PLACEHOLDER_LAZY_COMPONENTS,\n          useValue: lazyComponents || []\n        }, {\n          provide: ROUTES,\n          useValue: lazyComponents || [],\n          multi: true\n        }, {\n          provide: PLACEHOLDER_MISSING_COMPONENT_COMPONENT,\n          useValue: MissingComponentComponent\n        }, {\n          provide: PLACEHOLDER_HIDDEN_RENDERING_COMPONENT,\n          useValue: HiddenRenderingComponent\n        }, ...JssModule.forRoot().providers]\n      };\n    }\n    static ɵfac = function JssModule_Factory(t) {\n      return new (t || JssModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: JssModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return JssModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}