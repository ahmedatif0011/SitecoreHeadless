{"ast":null,"code":"import { Directive, Input } from '@angular/core';\nimport { isAbsoluteUrl } from '@sitecore-jss/sitecore-jss/utils';\nimport { BaseFieldDirective } from './base-field.directive';\nimport { DefaultEmptyFieldEditingComponent } from './default-empty-text-field-editing-placeholder.component';\nimport { MetadataKind } from '@sitecore-jss/sitecore-jss/editing';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let RichTextDirective = /*#__PURE__*/(() => {\n  class RichTextDirective extends BaseFieldDirective {\n    templateRef;\n    renderer;\n    router;\n    editable = true;\n    field;\n    /**\n     * Custom template to render in Pages in Metadata edit mode if field value is empty\n     */\n    emptyFieldEditingTemplate;\n    /**\n     * Default component to render in Pages in Metadata edit mode if field value is empty and emptyFieldEditingTemplate is not provided\n     */\n    defaultFieldEditingComponent;\n    constructor(viewContainer, templateRef, renderer, router) {\n      super(viewContainer);\n      this.templateRef = templateRef;\n      this.renderer = renderer;\n      this.router = router;\n      this.defaultFieldEditingComponent = DefaultEmptyFieldEditingComponent;\n    }\n    ngOnChanges(changes) {\n      if (changes.field || changes.editable) {\n        this.viewContainer.clear();\n        this.updateView();\n      }\n    }\n    updateView() {\n      if (!this.shouldRender()) {\n        super.renderEmpty();\n        return;\n      }\n      this.renderMetadata(MetadataKind.Open);\n      this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef);\n      this.renderMetadata(MetadataKind.Close);\n      const field = this.field;\n      const html = field.editable && this.editable ? field.editable : field.value;\n      this.viewRef.rootNodes.forEach(node => {\n        node.innerHTML = html;\n        if (!node.querySelectorAll) {\n          return;\n        }\n        const links = node.querySelectorAll('a[href]');\n        const linksArray = [].slice.call(links);\n        linksArray.forEach(link => {\n          const href = link.getAttribute('href');\n          const target = link.getAttribute('target');\n          if (!href || isAbsoluteUrl(href) || target === '_blank' || target === '_top') {\n            return;\n          }\n          this.renderer.listen(link, 'click', event => {\n            this.router.navigateByUrl(href);\n            event.preventDefault();\n          });\n        });\n      });\n    }\n    static ɵfac = function RichTextDirective_Factory(t) {\n      return new (t || RichTextDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Router));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RichTextDirective,\n      selectors: [[\"\", \"scRichText\", \"\"]],\n      inputs: {\n        editable: [i0.ɵɵInputFlags.None, \"scRichTextEditable\", \"editable\"],\n        field: [i0.ɵɵInputFlags.None, \"scRichText\", \"field\"],\n        emptyFieldEditingTemplate: [i0.ɵɵInputFlags.None, \"scRichTextEmptyFieldEditingTemplate\", \"emptyFieldEditingTemplate\"]\n      },\n      features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return RichTextDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmljaC10ZXh0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3JpY2gtdGV4dC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEdBT04sTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRWpFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzdHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7O0FBS2xFLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxrQkFBa0I7SUFpQjdDO0lBQ0E7SUFDQTtJQWxCbUIsUUFBUSxHQUFHLElBQUksQ0FBQztJQUV4QixLQUFLLENBQWdCO0lBRTFDOztPQUVHO0lBQzJDLHlCQUF5QixDQUF1QjtJQUU5Rjs7T0FFRztJQUNPLDRCQUE0QixDQUFnQjtJQUV0RCxZQUNFLGFBQStCLEVBQ3ZCLFdBQWlDLEVBQ2pDLFFBQW1CLEVBQ25CLE1BQWM7UUFFdEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBSmIsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUd0QixJQUFJLENBQUMsNEJBQTRCLEdBQUcsaUNBQWlDLENBQUM7SUFDeEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BCLENBQUM7SUFDSCxDQUFDO0lBRU8sVUFBVTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUM7WUFDekIsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BCLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUM1RSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQzNCLE9BQU87WUFDVCxDQUFDO1lBRUQsTUFBTSxLQUFLLEdBQWdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1RSxNQUFNLFVBQVUsR0FBMkIsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFaEUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUMxQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN2QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUUzQyxJQUFJLENBQUMsSUFBSSxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUUsQ0FBQztvQkFDN0UsT0FBTztnQkFDVCxDQUFDO2dCQUVELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2hDLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDekIsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzt3R0FwRVUsaUJBQWlCOzRGQUFqQixpQkFBaUI7OzRGQUFqQixpQkFBaUI7a0JBSDdCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7aUJBQ3pCOzRKQUU4QixRQUFRO3NCQUFwQyxLQUFLO3VCQUFDLG9CQUFvQjtnQkFFTixLQUFLO3NCQUF6QixLQUFLO3VCQUFDLFlBQVk7Z0JBSzJCLHlCQUF5QjtzQkFBdEUsS0FBSzt1QkFBQyxxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIERpcmVjdGl2ZSxcclxuICBJbnB1dCxcclxuICBPbkNoYW5nZXMsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBUZW1wbGF0ZVJlZixcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG4gIFJlbmRlcmVyMixcclxuICBUeXBlLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5pbXBvcnQgeyBpc0Fic29sdXRlVXJsIH0gZnJvbSAnQHNpdGVjb3JlLWpzcy9zaXRlY29yZS1qc3MvdXRpbHMnO1xyXG5pbXBvcnQgeyBSaWNoVGV4dEZpZWxkIH0gZnJvbSAnLi9yZW5kZXJpbmctZmllbGQnO1xyXG5pbXBvcnQgeyBCYXNlRmllbGREaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UtZmllbGQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRGVmYXVsdEVtcHR5RmllbGRFZGl0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi9kZWZhdWx0LWVtcHR5LXRleHQtZmllbGQtZWRpdGluZy1wbGFjZWhvbGRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNZXRhZGF0YUtpbmQgfSBmcm9tICdAc2l0ZWNvcmUtanNzL3NpdGVjb3JlLWpzcy9lZGl0aW5nJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3NjUmljaFRleHRdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJpY2hUZXh0RGlyZWN0aXZlIGV4dGVuZHMgQmFzZUZpZWxkRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoJ3NjUmljaFRleHRFZGl0YWJsZScpIGVkaXRhYmxlID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KCdzY1JpY2hUZXh0JykgZmllbGQ6IFJpY2hUZXh0RmllbGQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEN1c3RvbSB0ZW1wbGF0ZSB0byByZW5kZXIgaW4gUGFnZXMgaW4gTWV0YWRhdGEgZWRpdCBtb2RlIGlmIGZpZWxkIHZhbHVlIGlzIGVtcHR5XHJcbiAgICovXHJcbiAgQElucHV0KCdzY1JpY2hUZXh0RW1wdHlGaWVsZEVkaXRpbmdUZW1wbGF0ZScpIGVtcHR5RmllbGRFZGl0aW5nVGVtcGxhdGU6IFRlbXBsYXRlUmVmPHVua25vd24+O1xyXG5cclxuICAvKipcclxuICAgKiBEZWZhdWx0IGNvbXBvbmVudCB0byByZW5kZXIgaW4gUGFnZXMgaW4gTWV0YWRhdGEgZWRpdCBtb2RlIGlmIGZpZWxkIHZhbHVlIGlzIGVtcHR5IGFuZCBlbXB0eUZpZWxkRWRpdGluZ1RlbXBsYXRlIGlzIG5vdCBwcm92aWRlZFxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBkZWZhdWx0RmllbGRFZGl0aW5nQ29tcG9uZW50OiBUeXBlPHVua25vd24+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjx1bmtub3duPixcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcclxuICApIHtcclxuICAgIHN1cGVyKHZpZXdDb250YWluZXIpO1xyXG4gICAgdGhpcy5kZWZhdWx0RmllbGRFZGl0aW5nQ29tcG9uZW50ID0gRGVmYXVsdEVtcHR5RmllbGRFZGl0aW5nQ29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuZmllbGQgfHwgY2hhbmdlcy5lZGl0YWJsZSkge1xyXG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcclxuICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2hvdWxkUmVuZGVyKCkpIHtcclxuICAgICAgc3VwZXIucmVuZGVyRW1wdHkoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVuZGVyTWV0YWRhdGEoTWV0YWRhdGFLaW5kLk9wZW4pO1xyXG4gICAgdGhpcy52aWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcclxuICAgIHRoaXMucmVuZGVyTWV0YWRhdGEoTWV0YWRhdGFLaW5kLkNsb3NlKTtcclxuXHJcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMuZmllbGQ7XHJcbiAgICBjb25zdCBodG1sID0gZmllbGQuZWRpdGFibGUgJiYgdGhpcy5lZGl0YWJsZSA/IGZpZWxkLmVkaXRhYmxlIDogZmllbGQudmFsdWU7XHJcbiAgICB0aGlzLnZpZXdSZWYucm9vdE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcclxuICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xyXG5cclxuICAgICAgaWYgKCFub2RlLnF1ZXJ5U2VsZWN0b3JBbGwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGxpbmtzOiBOb2RlTGlzdE9mPEhUTUxMaW5rRWxlbWVudD4gPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZl0nKTtcclxuICAgICAgY29uc3QgbGlua3NBcnJheTogQXJyYXk8SFRNTExpbmtFbGVtZW50PiA9IFtdLnNsaWNlLmNhbGwobGlua3MpO1xyXG5cclxuICAgICAgbGlua3NBcnJheS5mb3JFYWNoKChsaW5rKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJyk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gbGluay5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpO1xyXG5cclxuICAgICAgICBpZiAoIWhyZWYgfHwgaXNBYnNvbHV0ZVVybChocmVmKSB8fCB0YXJnZXQgPT09ICdfYmxhbmsnIHx8IHRhcmdldCA9PT0gJ190b3AnKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihsaW5rLCAnY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoaHJlZik7XHJcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}